# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when a release is created
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project and GKE_SA_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke
#
# GKE_SA_KEY = cat <file>.json | base64

name: Configure-GKE-TLS

on:
  push:
    paths:
      - 'ambassador/**'
      - '.github/workflows/configure-gke-tls.yml'

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: premier-predictor
  GKE_ZONE: europe-west2-a

jobs:
  deploy:
    name: Configure TLS
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

      - run: |-
          gcloud --quiet auth configure-docker

      - uses: google-github-actions/get-gke-credentials@v0.2.1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ secrets.GKE_SA_KEY }}

      - name: Helm tool installer
        uses: Azure/setup-helm@v1
        id: install

      - name: Configure TLS
        run: |-
          helm repo add jetstack https://charts.jetstack.io && helm repo update
          kubectl apply -f ./ambassador/ns.yaml
          helm del --purge cert-manager
          helm install \
            cert-manager jetstack/cert-manager \
            --namespace cert-manager \
            --version v0.16.0 \
            --set installCRDs=true
          kubectl -n cert-manager rollout status deploy/cert-manager-webhook
          sleep 120
          kubectl apply -f ./ambassador/https.yaml
          kubectl apply -f https://www.getambassador.io/yaml/ambassador/ambassador-crds.yaml
          kubectl apply -f https://www.getambassador.io/yaml/ambassador/ambassador-rbac.yaml
          kubectl apply -f ./ambassador/ambassador.yaml
          kubectl apply -f ./ambassador/ingress.yaml
          kubectl apply -f ./ambassador/cert.yaml
          kubectl apply -f ./ambassador/acme.yaml
