// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cshep4/premier-predictor-microservices/proto-gen/model/gen (interfaces: PredictionServiceClient)

// Package predictionmocks is a generated GoMock package.
package predictionmocks

import (
	context "context"
	gen "github.com/cshep4/premier-predictor-microservices/proto-gen/model/gen"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockPredictionServiceClient is a mock of PredictionServiceClient interface
type MockPredictionServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPredictionServiceClientMockRecorder
}

// MockPredictionServiceClientMockRecorder is the mock recorder for MockPredictionServiceClient
type MockPredictionServiceClientMockRecorder struct {
	mock *MockPredictionServiceClient
}

// NewMockPredictionServiceClient creates a new mock instance
func NewMockPredictionServiceClient(ctrl *gomock.Controller) *MockPredictionServiceClient {
	mock := &MockPredictionServiceClient{ctrl: ctrl}
	mock.recorder = &MockPredictionServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPredictionServiceClient) EXPECT() *MockPredictionServiceClientMockRecorder {
	return m.recorder
}

// GetPrediction mocks base method
func (m *MockPredictionServiceClient) GetPrediction(arg0 context.Context, arg1 *gen.PredictionRequest, arg2 ...grpc.CallOption) (*gen.Prediction, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPrediction", varargs...)
	ret0, _ := ret[0].(*gen.Prediction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrediction indicates an expected call of GetPrediction
func (mr *MockPredictionServiceClientMockRecorder) GetPrediction(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrediction", reflect.TypeOf((*MockPredictionServiceClient)(nil).GetPrediction), varargs...)
}

// GetPredictionSummary mocks base method
func (m *MockPredictionServiceClient) GetPredictionSummary(arg0 context.Context, arg1 *gen.IdRequest, arg2 ...grpc.CallOption) (*gen.MatchPredictionSummary, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPredictionSummary", varargs...)
	ret0, _ := ret[0].(*gen.MatchPredictionSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPredictionSummary indicates an expected call of GetPredictionSummary
func (mr *MockPredictionServiceClientMockRecorder) GetPredictionSummary(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPredictionSummary", reflect.TypeOf((*MockPredictionServiceClient)(nil).GetPredictionSummary), varargs...)
}
