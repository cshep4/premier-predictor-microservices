// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cshep4/premier-predictor-microservices/src/livematchservice/internal/interfaces (interfaces: Predictor)

// Package predictionmocks is a generated GoMock package.
package predictionmocks

import (
	context "context"
	model "github.com/cshep4/premier-predictor-microservices/src/common/model"
	model0 "github.com/cshep4/premier-predictor-microservices/src/livematchservice/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPredictor is a mock of Predictor interface
type MockPredictor struct {
	ctrl     *gomock.Controller
	recorder *MockPredictorMockRecorder
}

// MockPredictorMockRecorder is the mock recorder for MockPredictor
type MockPredictorMockRecorder struct {
	mock *MockPredictor
}

// NewMockPredictor creates a new mock instance
func NewMockPredictor(ctrl *gomock.Controller) *MockPredictor {
	mock := &MockPredictor{ctrl: ctrl}
	mock.recorder = &MockPredictorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPredictor) EXPECT() *MockPredictorMockRecorder {
	return m.recorder
}

// GetPrediction mocks base method
func (m *MockPredictor) GetPrediction(arg0 context.Context, arg1 model0.PredictionRequest) (*model.Prediction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrediction", arg0, arg1)
	ret0, _ := ret[0].(*model.Prediction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrediction indicates an expected call of GetPrediction
func (mr *MockPredictorMockRecorder) GetPrediction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrediction", reflect.TypeOf((*MockPredictor)(nil).GetPrediction), arg0, arg1)
}

// GetPredictionSummary mocks base method
func (m *MockPredictor) GetPredictionSummary(arg0 context.Context, arg1 string) (*model.MatchPredictionSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPredictionSummary", arg0, arg1)
	ret0, _ := ret[0].(*model.MatchPredictionSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPredictionSummary indicates an expected call of GetPredictionSummary
func (mr *MockPredictorMockRecorder) GetPredictionSummary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPredictionSummary", reflect.TypeOf((*MockPredictor)(nil).GetPredictionSummary), arg0, arg1)
}
