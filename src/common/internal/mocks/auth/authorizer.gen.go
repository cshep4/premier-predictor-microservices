// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cshep4/premier-predictor-microservices/src/common/auth/http (interfaces: Authorizer)

// Package auth_mocks is a generated GoMock package.
package auth_mocks

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockAuthorizer is a mock of Authorizer interface
type MockAuthorizer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizerMockRecorder
}

// MockAuthorizerMockRecorder is the mock recorder for MockAuthorizer
type MockAuthorizerMockRecorder struct {
	mock *MockAuthorizer
}

// NewMockAuthorizer creates a new mock instance
func NewMockAuthorizer(ctrl *gomock.Controller) *MockAuthorizer {
	mock := &MockAuthorizer{ctrl: ctrl}
	mock.recorder = &MockAuthorizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthorizer) EXPECT() *MockAuthorizerMockRecorder {
	return m.recorder
}

// GetRequestAudience mocks base method
func (m *MockAuthorizer) GetRequestAudience(arg0 *http.Request) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestAudience", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestAudience indicates an expected call of GetRequestAudience
func (mr *MockAuthorizerMockRecorder) GetRequestAudience(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestAudience", reflect.TypeOf((*MockAuthorizer)(nil).GetRequestAudience), arg0)
}

// IsUnauthenticatedEndpoint mocks base method
func (m *MockAuthorizer) IsUnauthenticatedEndpoint(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUnauthenticatedEndpoint", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUnauthenticatedEndpoint indicates an expected call of IsUnauthenticatedEndpoint
func (mr *MockAuthorizerMockRecorder) IsUnauthenticatedEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUnauthenticatedEndpoint", reflect.TypeOf((*MockAuthorizer)(nil).IsUnauthenticatedEndpoint), arg0)
}
