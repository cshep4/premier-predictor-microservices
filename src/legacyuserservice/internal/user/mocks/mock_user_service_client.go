// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cshep4/premier-predictor-microservices/proto-gen/model/gen (interfaces: UserServiceClient)

// Package usermocks is a generated GoMock package.
package usermocks

import (
	context "context"
	gen "github.com/cshep4/premier-predictor-microservices/proto-gen/model/gen"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockUserServiceClient is a mock of UserServiceClient interface
type MockUserServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceClientMockRecorder
}

// MockUserServiceClientMockRecorder is the mock recorder for MockUserServiceClient
type MockUserServiceClientMockRecorder struct {
	mock *MockUserServiceClient
}

// NewMockUserServiceClient creates a new mock instance
func NewMockUserServiceClient(ctrl *gomock.Controller) *MockUserServiceClient {
	mock := &MockUserServiceClient{ctrl: ctrl}
	mock.recorder = &MockUserServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserServiceClient) EXPECT() *MockUserServiceClientMockRecorder {
	return m.recorder
}

// GetAllUsers mocks base method
func (m *MockUserServiceClient) GetAllUsers(arg0 context.Context, arg1 *empty.Empty, arg2 ...grpc.CallOption) (*gen.UserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllUsers", varargs...)
	ret0, _ := ret[0].(*gen.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers
func (mr *MockUserServiceClientMockRecorder) GetAllUsers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockUserServiceClient)(nil).GetAllUsers), varargs...)
}

// GetAllUsersByIds mocks base method
func (m *MockUserServiceClient) GetAllUsersByIds(arg0 context.Context, arg1 *gen.GroupIdRequest, arg2 ...grpc.CallOption) (*gen.UserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllUsersByIds", varargs...)
	ret0, _ := ret[0].(*gen.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsersByIds indicates an expected call of GetAllUsersByIds
func (mr *MockUserServiceClientMockRecorder) GetAllUsersByIds(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsersByIds", reflect.TypeOf((*MockUserServiceClient)(nil).GetAllUsersByIds), varargs...)
}

// GetOverallRank mocks base method
func (m *MockUserServiceClient) GetOverallRank(arg0 context.Context, arg1 *gen.IdRequest, arg2 ...grpc.CallOption) (*gen.RankResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOverallRank", varargs...)
	ret0, _ := ret[0].(*gen.RankResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOverallRank indicates an expected call of GetOverallRank
func (mr *MockUserServiceClientMockRecorder) GetOverallRank(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOverallRank", reflect.TypeOf((*MockUserServiceClient)(nil).GetOverallRank), varargs...)
}

// GetRankForGroup mocks base method
func (m *MockUserServiceClient) GetRankForGroup(arg0 context.Context, arg1 *gen.GroupRankRequest, arg2 ...grpc.CallOption) (*gen.RankResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRankForGroup", varargs...)
	ret0, _ := ret[0].(*gen.RankResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRankForGroup indicates an expected call of GetRankForGroup
func (mr *MockUserServiceClientMockRecorder) GetRankForGroup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRankForGroup", reflect.TypeOf((*MockUserServiceClient)(nil).GetRankForGroup), varargs...)
}

// GetUserByEmail mocks base method
func (m *MockUserServiceClient) GetUserByEmail(arg0 context.Context, arg1 *gen.EmailRequest, arg2 ...grpc.CallOption) (*gen.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserByEmail", varargs...)
	ret0, _ := ret[0].(*gen.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail
func (mr *MockUserServiceClientMockRecorder) GetUserByEmail(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserServiceClient)(nil).GetUserByEmail), varargs...)
}

// GetUserCount mocks base method
func (m *MockUserServiceClient) GetUserCount(arg0 context.Context, arg1 *empty.Empty, arg2 ...grpc.CallOption) (*gen.CountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserCount", varargs...)
	ret0, _ := ret[0].(*gen.CountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCount indicates an expected call of GetUserCount
func (mr *MockUserServiceClientMockRecorder) GetUserCount(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCount", reflect.TypeOf((*MockUserServiceClient)(nil).GetUserCount), varargs...)
}
