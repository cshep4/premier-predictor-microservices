// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cshep4/premier-predictor-microservices/src/leagueservice/internal/interfaces (interfaces: Repository)

// Package leaguemocks is a generated GoMock package.
package leaguemocks

import (
	model "github.com/cshep4/premier-predictor-microservices/src/leagueservice/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddLeague mocks base method
func (m *MockRepository) AddLeague(arg0 model.League) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLeague", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLeague indicates an expected call of AddLeague
func (mr *MockRepositoryMockRecorder) AddLeague(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLeague", reflect.TypeOf((*MockRepository)(nil).AddLeague), arg0)
}

// GetLeagueByPin mocks base method
func (m *MockRepository) GetLeagueByPin(arg0 int64) (*model.League, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeagueByPin", arg0)
	ret0, _ := ret[0].(*model.League)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeagueByPin indicates an expected call of GetLeagueByPin
func (mr *MockRepositoryMockRecorder) GetLeagueByPin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeagueByPin", reflect.TypeOf((*MockRepository)(nil).GetLeagueByPin), arg0)
}

// GetLeaguesByUserId mocks base method
func (m *MockRepository) GetLeaguesByUserId(arg0 string) ([]*model.League, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaguesByUserId", arg0)
	ret0, _ := ret[0].([]*model.League)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeaguesByUserId indicates an esxpected call of GetLeaguesByUserId
func (mr *MockRepositoryMockRecorder) GetLeaguesByUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaguesByUserId", reflect.TypeOf((*MockRepository)(nil).GetLeaguesByUserId), arg0)
}

// JoinLeague mocks base method
func (m *MockRepository) JoinLeague(arg0 int64, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinLeague", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinLeague indicates an expected call of JoinLeague
func (mr *MockRepositoryMockRecorder) JoinLeague(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinLeague", reflect.TypeOf((*MockRepository)(nil).JoinLeague), arg0, arg1)
}

// LeaveLeague mocks base method
func (m *MockRepository) LeaveLeague(arg0 int64, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveLeague", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaveLeague indicates an expected call of LeaveLeague
func (mr *MockRepositoryMockRecorder) LeaveLeague(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveLeague", reflect.TypeOf((*MockRepository)(nil).LeaveLeague), arg0, arg1)
}

// RenameLeague mocks base method
func (m *MockRepository) RenameLeague(arg0 int64, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameLeague", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameLeague indicates an expected call of RenameLeague
func (mr *MockRepositoryMockRecorder) RenameLeague(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameLeague", reflect.TypeOf((*MockRepository)(nil).RenameLeague), arg0, arg1)
}
