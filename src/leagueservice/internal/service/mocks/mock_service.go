// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cshep4/premier-predictor-microservices/src/leagueservice/internal/interfaces (interfaces: Service)

// Package leaguemocks is a generated GoMock package.
package leaguemocks

import (
	model "github.com/cshep4/premier-predictor-microservices/src/leagueservice/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddUserLeague mocks base method
func (m *MockService) AddUserLeague(arg0, arg1 string) (*model.League, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserLeague", arg0, arg1)
	ret0, _ := ret[0].(*model.League)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserLeague indicates an expected call of AddUserLeague
func (mr *MockServiceMockRecorder) AddUserLeague(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserLeague", reflect.TypeOf((*MockService)(nil).AddUserLeague), arg0, arg1)
}

// GetLeagueTable mocks base method
func (m *MockService) GetLeagueTable(arg0 int64) ([]*model.LeagueUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeagueTable", arg0)
	ret0, _ := ret[0].([]*model.LeagueUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeagueTable indicates an expected call of GetLeagueTable
func (mr *MockServiceMockRecorder) GetLeagueTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeagueTable", reflect.TypeOf((*MockService)(nil).GetLeagueTable), arg0)
}

// GetOverallLeagueTable mocks base method
func (m *MockService) GetOverallLeagueTable() ([]*model.LeagueUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOverallLeagueTable")
	ret0, _ := ret[0].([]*model.LeagueUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOverallLeagueTable indicates an expected call of GetOverallLeagueTable
func (mr *MockServiceMockRecorder) GetOverallLeagueTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOverallLeagueTable", reflect.TypeOf((*MockService)(nil).GetOverallLeagueTable))
}

// GetUsersLeagueList mocks base method
func (m *MockService) GetUsersLeagueList(arg0 string) (*model.StandingsOverview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersLeagueList", arg0)
	ret0, _ := ret[0].(*model.StandingsOverview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersLeagueList indicates an expected call of GetUsersLeagueList
func (mr *MockServiceMockRecorder) GetUsersLeagueList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersLeagueList", reflect.TypeOf((*MockService)(nil).GetUsersLeagueList), arg0)
}

// JoinUserLeague mocks base method
func (m *MockService) JoinUserLeague(arg0 string, arg1 int64) (*model.LeagueOverview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinUserLeague", arg0, arg1)
	ret0, _ := ret[0].(*model.LeagueOverview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinUserLeague indicates an expected call of JoinUserLeague
func (mr *MockServiceMockRecorder) JoinUserLeague(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinUserLeague", reflect.TypeOf((*MockService)(nil).JoinUserLeague), arg0, arg1)
}

// LeaveUserLeague mocks base method
func (m *MockService) LeaveUserLeague(arg0 string, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveUserLeague", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaveUserLeague indicates an expected call of LeaveUserLeague
func (mr *MockServiceMockRecorder) LeaveUserLeague(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveUserLeague", reflect.TypeOf((*MockService)(nil).LeaveUserLeague), arg0, arg1)
}

// RenameUserLeague mocks base method
func (m *MockService) RenameUserLeague(arg0 int64, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameUserLeague", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameUserLeague indicates an expected call of RenameUserLeague
func (mr *MockServiceMockRecorder) RenameUserLeague(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameUserLeague", reflect.TypeOf((*MockService)(nil).RenameUserLeague), arg0, arg1)
}
