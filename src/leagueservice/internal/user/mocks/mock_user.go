// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cshep4/premier-predictor-microservices/src/leagueservice/internal/interfaces (interfaces: UserService)

// Package usermocks is a generated GoMock package.
package usermocks

import (
	model "github.com/cshep4/premier-predictor-microservices/src/leagueservice/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserService is a mock of UserService interface
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// GetAllUsers mocks base method
func (m *MockUserService) GetAllUsers() ([]*model.LeagueUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].([]*model.LeagueUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers
func (mr *MockUserServiceMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockUserService)(nil).GetAllUsers))
}

// GetLeagueRank mocks base method
func (m *MockUserService) GetLeagueRank(arg0 string, arg1 []string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeagueRank", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeagueRank indicates an expected call of GetLeagueRank
func (mr *MockUserServiceMockRecorder) GetLeagueRank(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeagueRank", reflect.TypeOf((*MockUserService)(nil).GetLeagueRank), arg0, arg1)
}

// GetLeagueUsers mocks base method
func (m *MockUserService) GetLeagueUsers(arg0 []string) ([]*model.LeagueUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeagueUsers", arg0)
	ret0, _ := ret[0].([]*model.LeagueUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeagueUsers indicates an expected call of GetLeagueUsers
func (mr *MockUserServiceMockRecorder) GetLeagueUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeagueUsers", reflect.TypeOf((*MockUserService)(nil).GetLeagueUsers), arg0)
}

// GetOverallRank mocks base method
func (m *MockUserService) GetOverallRank(arg0 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOverallRank", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOverallRank indicates an expected call of GetOverallRank
func (mr *MockUserServiceMockRecorder) GetOverallRank(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOverallRank", reflect.TypeOf((*MockUserService)(nil).GetOverallRank), arg0)
}

// GetUserCount mocks base method
func (m *MockUserService) GetUserCount() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCount")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCount indicates an expected call of GetUserCount
func (mr *MockUserServiceMockRecorder) GetUserCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCount", reflect.TypeOf((*MockUserService)(nil).GetUserCount))
}
