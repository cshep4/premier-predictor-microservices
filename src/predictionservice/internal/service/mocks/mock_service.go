// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cshep4/premier-predictor-microservices/src/predictionservice/internal/interfaces (interfaces: Service)

// Package predictionmocks is a generated GoMock package.
package predictionmocks

import (
	model "github.com/cshep4/premier-predictor-microservices/src/common/model"
	model0 "github.com/cshep4/premier-predictor-microservices/src/predictionservice/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetFixturesWithPredictions mocks base method
func (m *MockService) GetFixturesWithPredictions(arg0 string) ([]model0.FixturePrediction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFixturesWithPredictions", arg0)
	ret0, _ := ret[0].([]model0.FixturePrediction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFixturesWithPredictions indicates an expected call of GetFixturesWithPredictions
func (mr *MockServiceMockRecorder) GetFixturesWithPredictions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFixturesWithPredictions", reflect.TypeOf((*MockService)(nil).GetFixturesWithPredictions), arg0)
}

// GetMatchPredictionSummary mocks base method
func (m *MockService) GetMatchPredictionSummary(arg0 string) (*model.MatchPredictionSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchPredictionSummary", arg0)
	ret0, _ := ret[0].(*model.MatchPredictionSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchPredictionSummary indicates an expected call of GetMatchPredictionSummary
func (mr *MockServiceMockRecorder) GetMatchPredictionSummary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchPredictionSummary", reflect.TypeOf((*MockService)(nil).GetMatchPredictionSummary), arg0)
}

// GetPrediction mocks base method
func (m *MockService) GetPrediction(arg0, arg1 string) (*model.Prediction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrediction", arg0, arg1)
	ret0, _ := ret[0].(*model.Prediction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrediction indicates an expected call of GetPrediction
func (mr *MockServiceMockRecorder) GetPrediction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrediction", reflect.TypeOf((*MockService)(nil).GetPrediction), arg0, arg1)
}

// GetPredictorData mocks base method
func (m *MockService) GetPredictorData(arg0 string) (*model0.PredictorData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPredictorData", arg0)
	ret0, _ := ret[0].(*model0.PredictorData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPredictorData indicates an expected call of GetPredictorData
func (mr *MockServiceMockRecorder) GetPredictorData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPredictorData", reflect.TypeOf((*MockService)(nil).GetPredictorData), arg0)
}

// GetUsersPastPredictions mocks base method
func (m *MockService) GetUsersPastPredictions(arg0 string) ([]model0.FixturePrediction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersPastPredictions", arg0)
	ret0, _ := ret[0].([]model0.FixturePrediction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersPastPredictions indicates an expected call of GetUsersPastPredictions
func (mr *MockServiceMockRecorder) GetUsersPastPredictions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersPastPredictions", reflect.TypeOf((*MockService)(nil).GetUsersPastPredictions), arg0)
}

// UpdatePredictions mocks base method
func (m *MockService) UpdatePredictions(arg0 []model.Prediction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePredictions", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePredictions indicates an expected call of UpdatePredictions
func (mr *MockServiceMockRecorder) UpdatePredictions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePredictions", reflect.TypeOf((*MockService)(nil).UpdatePredictions), arg0)
}
