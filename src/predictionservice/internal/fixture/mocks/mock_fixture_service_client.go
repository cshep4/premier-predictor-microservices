// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cshep4/premier-predictor-microservices/proto-gen/model/gen (interfaces: FixtureServiceClient)

// Package fixturemocks is a generated GoMock package.
package fixturemocks

import (
	context "context"
	gen "github.com/cshep4/premier-predictor-microservices/proto-gen/model/gen"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockFixtureServiceClient is a mock of FixtureServiceClient interface
type MockFixtureServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFixtureServiceClientMockRecorder
}

// MockFixtureServiceClientMockRecorder is the mock recorder for MockFixtureServiceClient
type MockFixtureServiceClientMockRecorder struct {
	mock *MockFixtureServiceClient
}

// NewMockFixtureServiceClient creates a new mock instance
func NewMockFixtureServiceClient(ctrl *gomock.Controller) *MockFixtureServiceClient {
	mock := &MockFixtureServiceClient{ctrl: ctrl}
	mock.recorder = &MockFixtureServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFixtureServiceClient) EXPECT() *MockFixtureServiceClientMockRecorder {
	return m.recorder
}

// GetMatches mocks base method
func (m *MockFixtureServiceClient) GetMatches(arg0 context.Context, arg1 *empty.Empty, arg2 ...grpc.CallOption) (*gen.Matches, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMatches", varargs...)
	ret0, _ := ret[0].(*gen.Matches)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatches indicates an expected call of GetMatches
func (mr *MockFixtureServiceClientMockRecorder) GetMatches(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatches", reflect.TypeOf((*MockFixtureServiceClient)(nil).GetMatches), varargs...)
}

// GetTeamForm mocks base method
func (m *MockFixtureServiceClient) GetTeamForm(arg0 context.Context, arg1 *empty.Empty, arg2 ...grpc.CallOption) (*gen.Forms, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTeamForm", varargs...)
	ret0, _ := ret[0].(*gen.Forms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamForm indicates an expected call of GetTeamForm
func (mr *MockFixtureServiceClientMockRecorder) GetTeamForm(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamForm", reflect.TypeOf((*MockFixtureServiceClient)(nil).GetTeamForm), varargs...)
}
