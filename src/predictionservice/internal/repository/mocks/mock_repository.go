// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cshep4/premier-predictor-microservices/src/predictionservice/internal/interfaces (interfaces: Repository)

// Package predictionmocks is a generated GoMock package.
package predictionmocks

import (
	model "github.com/cshep4/premier-predictor-microservices/src/common/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetMatchPredictionSummary mocks base method
func (m *MockRepository) GetMatchPredictionSummary(arg0 string) (int, int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchPredictionSummary", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetMatchPredictionSummary indicates an expected call of GetMatchPredictionSummary
func (mr *MockRepositoryMockRecorder) GetMatchPredictionSummary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchPredictionSummary", reflect.TypeOf((*MockRepository)(nil).GetMatchPredictionSummary), arg0)
}

// GetPrediction mocks base method
func (m *MockRepository) GetPrediction(arg0, arg1 string) (*model.Prediction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrediction", arg0, arg1)
	ret0, _ := ret[0].(*model.Prediction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrediction indicates an expected call of GetPrediction
func (mr *MockRepositoryMockRecorder) GetPrediction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrediction", reflect.TypeOf((*MockRepository)(nil).GetPrediction), arg0, arg1)
}

// GetPredictionsByUserId mocks base method
func (m *MockRepository) GetPredictionsByUserId(arg0 string) ([]model.Prediction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPredictionsByUserId", arg0)
	ret0, _ := ret[0].([]model.Prediction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPredictionsByUserId indicates an expected call of GetPredictionsByUserId
func (mr *MockRepositoryMockRecorder) GetPredictionsByUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPredictionsByUserId", reflect.TypeOf((*MockRepository)(nil).GetPredictionsByUserId), arg0)
}

// UpdatePredictions mocks base method
func (m *MockRepository) UpdatePredictions(arg0 []model.Prediction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePredictions", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePredictions indicates an expected call of UpdatePredictions
func (mr *MockRepositoryMockRecorder) UpdatePredictions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePredictions", reflect.TypeOf((*MockRepository)(nil).UpdatePredictions), arg0)
}
