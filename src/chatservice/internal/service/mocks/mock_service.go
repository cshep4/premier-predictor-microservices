// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cshep4/premier-predictor-microservices/src/chatservice/internal/interfaces (interfaces: Service)

// Package chatmocks is a generated GoMock package.
package chatmocks

import (
	model "github.com/cshep4/premier-predictor-microservices/src/chatservice/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateChat mocks base method
func (m *MockService) CreateChat(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChat", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateChat indicates an expected call of CreateChat
func (mr *MockServiceMockRecorder) CreateChat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChat", reflect.TypeOf((*MockService)(nil).CreateChat), arg0, arg1)
}

// GetLatestMessages mocks base method
func (m *MockService) GetLatestMessages(arg0 string) ([]model.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestMessages", arg0)
	ret0, _ := ret[0].([]model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestMessages indicates an expected call of GetLatestMessages
func (mr *MockServiceMockRecorder) GetLatestMessages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestMessages", reflect.TypeOf((*MockService)(nil).GetLatestMessages), arg0)
}

// GetPreviousMessages mocks base method
func (m *MockService) GetPreviousMessages(arg0, arg1 string) ([]model.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreviousMessages", arg0, arg1)
	ret0, _ := ret[0].([]model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreviousMessages indicates an expected call of GetPreviousMessages
func (mr *MockServiceMockRecorder) GetPreviousMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreviousMessages", reflect.TypeOf((*MockService)(nil).GetPreviousMessages), arg0, arg1)
}

// JoinChat mocks base method
func (m *MockService) JoinChat(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinChat", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinChat indicates an expected call of JoinChat
func (mr *MockServiceMockRecorder) JoinChat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinChat", reflect.TypeOf((*MockService)(nil).JoinChat), arg0, arg1)
}

// LeaveChat mocks base method
func (m *MockService) LeaveChat(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveChat", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaveChat indicates an expected call of LeaveChat
func (mr *MockServiceMockRecorder) LeaveChat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveChat", reflect.TypeOf((*MockService)(nil).LeaveChat), arg0, arg1)
}

// SendMessage mocks base method
func (m *MockService) SendMessage(arg0 model.Message) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage
func (mr *MockServiceMockRecorder) SendMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockService)(nil).SendMessage), arg0)
}

// UpdateReadMessage mocks base method
func (m *MockService) UpdateReadMessage(arg0 model.ReadReceipt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReadMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReadMessage indicates an expected call of UpdateReadMessage
func (mr *MockServiceMockRecorder) UpdateReadMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReadMessage", reflect.TypeOf((*MockService)(nil).UpdateReadMessage), arg0)
}
