// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cshep4/premier-predictor-microservices/src/chatservice/internal/repository (interfaces: Repository)

// Package chatmocks is a generated GoMock package.
package chatmocks

import (
	model "github.com/cshep4/premier-predictor-microservices/src/chatservice/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateChat mocks base method
func (m *MockRepository) CreateChat(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChat", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateChat indicates an expected call of CreateChat
func (mr *MockRepositoryMockRecorder) CreateChat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChat", reflect.TypeOf((*MockRepository)(nil).CreateChat), arg0, arg1)
}

// GetChatById mocks base method
func (m *MockRepository) GetChatById(arg0 string) (*model.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatById", arg0)
	ret0, _ := ret[0].(*model.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatById indicates an expected call of GetChatById
func (mr *MockRepositoryMockRecorder) GetChatById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatById", reflect.TypeOf((*MockRepository)(nil).GetChatById), arg0)
}

// GetLatestMessages mocks base method
func (m *MockRepository) GetLatestMessages(arg0 string) ([]model.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestMessages", arg0)
	ret0, _ := ret[0].([]model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestMessages indicates an expected call of GetLatestMessages
func (mr *MockRepositoryMockRecorder) GetLatestMessages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestMessages", reflect.TypeOf((*MockRepository)(nil).GetLatestMessages), arg0)
}

// GetPreviousMessages mocks base method
func (m *MockRepository) GetPreviousMessages(arg0, arg1 string) ([]model.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreviousMessages", arg0, arg1)
	ret0, _ := ret[0].([]model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreviousMessages indicates an expected call of GetPreviousMessages
func (mr *MockRepositoryMockRecorder) GetPreviousMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreviousMessages", reflect.TypeOf((*MockRepository)(nil).GetPreviousMessages), arg0, arg1)
}

// JoinChat mocks base method
func (m *MockRepository) JoinChat(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinChat", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinChat indicates an expected call of JoinChat
func (mr *MockRepositoryMockRecorder) JoinChat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinChat", reflect.TypeOf((*MockRepository)(nil).JoinChat), arg0, arg1)
}

// LeaveChat mocks base method
func (m *MockRepository) LeaveChat(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveChat", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaveChat indicates an expected call of LeaveChat
func (mr *MockRepositoryMockRecorder) LeaveChat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveChat", reflect.TypeOf((*MockRepository)(nil).LeaveChat), arg0, arg1)
}

// SendMessage mocks base method
func (m *MockRepository) SaveMessage(arg0 model.Message) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage
func (mr *MockRepositoryMockRecorder) SaveMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockRepository)(nil).SaveMessage), arg0)
}

// SaveReadReceipt mocks base method
func (m *MockRepository) SaveReadReceipt(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveReadReceipt", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveReadReceipt indicates an expected call of SaveReadReceipt
func (mr *MockRepositoryMockRecorder) SaveReadReceipt(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveReadReceipt", reflect.TypeOf((*MockRepository)(nil).SaveReadReceipt), arg0, arg1, arg2)
}
