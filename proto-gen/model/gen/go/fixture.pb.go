// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fixture.proto

package model

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TeamMatchResult_Result int32

const (
	TeamMatchResult_WIN  TeamMatchResult_Result = 0
	TeamMatchResult_DRAW TeamMatchResult_Result = 1
	TeamMatchResult_LOSS TeamMatchResult_Result = 2
)

var TeamMatchResult_Result_name = map[int32]string{
	0: "WIN",
	1: "DRAW",
	2: "LOSS",
}

var TeamMatchResult_Result_value = map[string]int32{
	"WIN":  0,
	"DRAW": 1,
	"LOSS": 2,
}

func (x TeamMatchResult_Result) String() string {
	return proto.EnumName(TeamMatchResult_Result_name, int32(x))
}

func (TeamMatchResult_Result) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d81820e403a865f4, []int{4, 0}
}

type TeamMatchResult_Location int32

const (
	TeamMatchResult_HOME TeamMatchResult_Location = 0
	TeamMatchResult_AWAY TeamMatchResult_Location = 1
)

var TeamMatchResult_Location_name = map[int32]string{
	0: "HOME",
	1: "AWAY",
}

var TeamMatchResult_Location_value = map[string]int32{
	"HOME": 0,
	"AWAY": 1,
}

func (x TeamMatchResult_Location) String() string {
	return proto.EnumName(TeamMatchResult_Location_name, int32(x))
}

func (TeamMatchResult_Location) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d81820e403a865f4, []int{4, 1}
}

type Matches struct {
	Matches              []*Match `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Matches) Reset()         { *m = Matches{} }
func (m *Matches) String() string { return proto.CompactTextString(m) }
func (*Matches) ProtoMessage()    {}
func (*Matches) Descriptor() ([]byte, []int) {
	return fileDescriptor_d81820e403a865f4, []int{0}
}

func (m *Matches) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Matches.Unmarshal(m, b)
}
func (m *Matches) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Matches.Marshal(b, m, deterministic)
}
func (m *Matches) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Matches.Merge(m, src)
}
func (m *Matches) XXX_Size() int {
	return xxx_messageInfo_Matches.Size(m)
}
func (m *Matches) XXX_DiscardUnknown() {
	xxx_messageInfo_Matches.DiscardUnknown(m)
}

var xxx_messageInfo_Matches proto.InternalMessageInfo

func (m *Matches) GetMatches() []*Match {
	if m != nil {
		return m.Matches
	}
	return nil
}

type Match struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	HTeam                string               `protobuf:"bytes,2,opt,name=hTeam,proto3" json:"hTeam,omitempty"`
	ATeam                string               `protobuf:"bytes,3,opt,name=aTeam,proto3" json:"aTeam,omitempty"`
	HGoals               int32                `protobuf:"varint,4,opt,name=hGoals,proto3" json:"hGoals,omitempty"`
	AGoals               int32                `protobuf:"varint,5,opt,name=aGoals,proto3" json:"aGoals,omitempty"`
	Played               int32                `protobuf:"varint,6,opt,name=played,proto3" json:"played,omitempty"`
	DateTime             *timestamp.Timestamp `protobuf:"bytes,7,opt,name=dateTime,proto3" json:"dateTime,omitempty"`
	Matchday             int32                `protobuf:"varint,8,opt,name=matchday,proto3" json:"matchday,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Match) Reset()         { *m = Match{} }
func (m *Match) String() string { return proto.CompactTextString(m) }
func (*Match) ProtoMessage()    {}
func (*Match) Descriptor() ([]byte, []int) {
	return fileDescriptor_d81820e403a865f4, []int{1}
}

func (m *Match) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Match.Unmarshal(m, b)
}
func (m *Match) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Match.Marshal(b, m, deterministic)
}
func (m *Match) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Match.Merge(m, src)
}
func (m *Match) XXX_Size() int {
	return xxx_messageInfo_Match.Size(m)
}
func (m *Match) XXX_DiscardUnknown() {
	xxx_messageInfo_Match.DiscardUnknown(m)
}

var xxx_messageInfo_Match proto.InternalMessageInfo

func (m *Match) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Match) GetHTeam() string {
	if m != nil {
		return m.HTeam
	}
	return ""
}

func (m *Match) GetATeam() string {
	if m != nil {
		return m.ATeam
	}
	return ""
}

func (m *Match) GetHGoals() int32 {
	if m != nil {
		return m.HGoals
	}
	return 0
}

func (m *Match) GetAGoals() int32 {
	if m != nil {
		return m.AGoals
	}
	return 0
}

func (m *Match) GetPlayed() int32 {
	if m != nil {
		return m.Played
	}
	return 0
}

func (m *Match) GetDateTime() *timestamp.Timestamp {
	if m != nil {
		return m.DateTime
	}
	return nil
}

func (m *Match) GetMatchday() int32 {
	if m != nil {
		return m.Matchday
	}
	return 0
}

type Forms struct {
	Teams                map[string]*TeamForm `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Forms) Reset()         { *m = Forms{} }
func (m *Forms) String() string { return proto.CompactTextString(m) }
func (*Forms) ProtoMessage()    {}
func (*Forms) Descriptor() ([]byte, []int) {
	return fileDescriptor_d81820e403a865f4, []int{2}
}

func (m *Forms) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Forms.Unmarshal(m, b)
}
func (m *Forms) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Forms.Marshal(b, m, deterministic)
}
func (m *Forms) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Forms.Merge(m, src)
}
func (m *Forms) XXX_Size() int {
	return xxx_messageInfo_Forms.Size(m)
}
func (m *Forms) XXX_DiscardUnknown() {
	xxx_messageInfo_Forms.DiscardUnknown(m)
}

var xxx_messageInfo_Forms proto.InternalMessageInfo

func (m *Forms) GetTeams() map[string]*TeamForm {
	if m != nil {
		return m.Teams
	}
	return nil
}

type TeamForm struct {
	Forms                []*TeamMatchResult `protobuf:"bytes,1,rep,name=forms,proto3" json:"forms,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TeamForm) Reset()         { *m = TeamForm{} }
func (m *TeamForm) String() string { return proto.CompactTextString(m) }
func (*TeamForm) ProtoMessage()    {}
func (*TeamForm) Descriptor() ([]byte, []int) {
	return fileDescriptor_d81820e403a865f4, []int{3}
}

func (m *TeamForm) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeamForm.Unmarshal(m, b)
}
func (m *TeamForm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeamForm.Marshal(b, m, deterministic)
}
func (m *TeamForm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamForm.Merge(m, src)
}
func (m *TeamForm) XXX_Size() int {
	return xxx_messageInfo_TeamForm.Size(m)
}
func (m *TeamForm) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamForm.DiscardUnknown(m)
}

var xxx_messageInfo_TeamForm proto.InternalMessageInfo

func (m *TeamForm) GetForms() []*TeamMatchResult {
	if m != nil {
		return m.Forms
	}
	return nil
}

type TeamMatchResult struct {
	Result               TeamMatchResult_Result   `protobuf:"varint,1,opt,name=result,proto3,enum=model.TeamMatchResult_Result" json:"result,omitempty"`
	Score                string                   `protobuf:"bytes,2,opt,name=score,proto3" json:"score,omitempty"`
	Opponent             string                   `protobuf:"bytes,3,opt,name=opponent,proto3" json:"opponent,omitempty"`
	Location             TeamMatchResult_Location `protobuf:"varint,4,opt,name=location,proto3,enum=model.TeamMatchResult_Location" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *TeamMatchResult) Reset()         { *m = TeamMatchResult{} }
func (m *TeamMatchResult) String() string { return proto.CompactTextString(m) }
func (*TeamMatchResult) ProtoMessage()    {}
func (*TeamMatchResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_d81820e403a865f4, []int{4}
}

func (m *TeamMatchResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeamMatchResult.Unmarshal(m, b)
}
func (m *TeamMatchResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeamMatchResult.Marshal(b, m, deterministic)
}
func (m *TeamMatchResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamMatchResult.Merge(m, src)
}
func (m *TeamMatchResult) XXX_Size() int {
	return xxx_messageInfo_TeamMatchResult.Size(m)
}
func (m *TeamMatchResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamMatchResult.DiscardUnknown(m)
}

var xxx_messageInfo_TeamMatchResult proto.InternalMessageInfo

func (m *TeamMatchResult) GetResult() TeamMatchResult_Result {
	if m != nil {
		return m.Result
	}
	return TeamMatchResult_WIN
}

func (m *TeamMatchResult) GetScore() string {
	if m != nil {
		return m.Score
	}
	return ""
}

func (m *TeamMatchResult) GetOpponent() string {
	if m != nil {
		return m.Opponent
	}
	return ""
}

func (m *TeamMatchResult) GetLocation() TeamMatchResult_Location {
	if m != nil {
		return m.Location
	}
	return TeamMatchResult_HOME
}

type FutureMatches struct {
	Matches              map[string]string `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *FutureMatches) Reset()         { *m = FutureMatches{} }
func (m *FutureMatches) String() string { return proto.CompactTextString(m) }
func (*FutureMatches) ProtoMessage()    {}
func (*FutureMatches) Descriptor() ([]byte, []int) {
	return fileDescriptor_d81820e403a865f4, []int{5}
}

func (m *FutureMatches) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FutureMatches.Unmarshal(m, b)
}
func (m *FutureMatches) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FutureMatches.Marshal(b, m, deterministic)
}
func (m *FutureMatches) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FutureMatches.Merge(m, src)
}
func (m *FutureMatches) XXX_Size() int {
	return xxx_messageInfo_FutureMatches.Size(m)
}
func (m *FutureMatches) XXX_DiscardUnknown() {
	xxx_messageInfo_FutureMatches.DiscardUnknown(m)
}

var xxx_messageInfo_FutureMatches proto.InternalMessageInfo

func (m *FutureMatches) GetMatches() map[string]string {
	if m != nil {
		return m.Matches
	}
	return nil
}

func init() {
	proto.RegisterEnum("model.TeamMatchResult_Result", TeamMatchResult_Result_name, TeamMatchResult_Result_value)
	proto.RegisterEnum("model.TeamMatchResult_Location", TeamMatchResult_Location_name, TeamMatchResult_Location_value)
	proto.RegisterType((*Matches)(nil), "model.Matches")
	proto.RegisterType((*Match)(nil), "model.Match")
	proto.RegisterType((*Forms)(nil), "model.Forms")
	proto.RegisterMapType((map[string]*TeamForm)(nil), "model.Forms.TeamsEntry")
	proto.RegisterType((*TeamForm)(nil), "model.TeamForm")
	proto.RegisterType((*TeamMatchResult)(nil), "model.TeamMatchResult")
	proto.RegisterType((*FutureMatches)(nil), "model.FutureMatches")
	proto.RegisterMapType((map[string]string)(nil), "model.FutureMatches.MatchesEntry")
}

func init() { proto.RegisterFile("fixture.proto", fileDescriptor_d81820e403a865f4) }

var fileDescriptor_d81820e403a865f4 = []byte{
	// 599 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0xcf, 0x4e, 0xdb, 0x4e,
	0x10, 0xfe, 0x6d, 0x82, 0x13, 0x33, 0x81, 0x90, 0xdf, 0x0a, 0x51, 0xcb, 0x55, 0x4b, 0xea, 0x8a,
	0x36, 0x87, 0x76, 0x51, 0x03, 0xad, 0x10, 0x9c, 0x52, 0x15, 0x52, 0x24, 0x28, 0x95, 0x41, 0x42,
	0x3d, 0x2e, 0xf6, 0x40, 0xac, 0xda, 0x59, 0xcb, 0xde, 0xa0, 0xe6, 0xd8, 0x5b, 0x9f, 0xaa, 0xaf,
	0xd2, 0x37, 0xa9, 0xaa, 0xfd, 0xe3, 0xd4, 0xa2, 0x70, 0xf2, 0xce, 0x37, 0xdf, 0xcc, 0xce, 0xcc,
	0x37, 0x6b, 0x58, 0xbd, 0x4e, 0xbe, 0xc9, 0x59, 0x81, 0x2c, 0x2f, 0x84, 0x14, 0xd4, 0xc9, 0x44,
	0x8c, 0xa9, 0xff, 0xf8, 0x46, 0x88, 0x9b, 0x14, 0xb7, 0x35, 0x78, 0x35, 0xbb, 0xde, 0xc6, 0x2c,
	0x97, 0x73, 0xc3, 0xf1, 0x37, 0xef, 0x3a, 0x65, 0x92, 0x61, 0x29, 0x79, 0x96, 0x1b, 0x42, 0xf0,
	0x06, 0xda, 0xa7, 0x5c, 0x46, 0x13, 0x2c, 0xe9, 0x0b, 0x68, 0x67, 0xe6, 0xe8, 0x91, 0x7e, 0x73,
	0xd0, 0x19, 0xae, 0x30, 0x7d, 0x03, 0xd3, 0x84, 0xb0, 0x72, 0x06, 0xbf, 0x08, 0x38, 0x1a, 0xa2,
	0x5d, 0x68, 0x24, 0xb1, 0x47, 0xfa, 0x64, 0xb0, 0x1c, 0x36, 0x92, 0x98, 0xae, 0x83, 0x33, 0xb9,
	0x40, 0x9e, 0x79, 0x0d, 0x0d, 0x19, 0x43, 0xa1, 0x5c, 0xa3, 0x4d, 0x83, 0x6a, 0x83, 0x6e, 0x40,
	0x6b, 0x32, 0x16, 0x3c, 0x2d, 0xbd, 0xa5, 0x3e, 0x19, 0x38, 0xa1, 0xb5, 0x14, 0xce, 0x0d, 0xee,
	0x18, 0x9c, 0x2f, 0xf0, 0x3c, 0xe5, 0x73, 0x8c, 0xbd, 0x96, 0xc1, 0x8d, 0x45, 0xdf, 0x81, 0x1b,
	0x73, 0x89, 0x17, 0x49, 0x86, 0x5e, 0xbb, 0x4f, 0x06, 0x9d, 0xa1, 0xcf, 0x4c, 0xd3, 0xac, 0x6a,
	0x9a, 0x5d, 0x54, 0x4d, 0x87, 0x0b, 0x2e, 0xf5, 0xc1, 0xd5, 0x0d, 0xc5, 0x7c, 0xee, 0xb9, 0x3a,
	0xe3, 0xc2, 0x0e, 0xbe, 0x13, 0x70, 0x8e, 0x44, 0x91, 0x95, 0xf4, 0x35, 0x38, 0x12, 0x79, 0x56,
	0x4d, 0xe4, 0x91, 0x9d, 0x88, 0x76, 0x32, 0xd5, 0x47, 0x79, 0x38, 0x95, 0xc5, 0x3c, 0x34, 0x2c,
	0xff, 0x18, 0xe0, 0x2f, 0x48, 0x7b, 0xd0, 0xfc, 0x8a, 0x73, 0x3b, 0x1f, 0x75, 0xa4, 0x5b, 0xe0,
	0xdc, 0xf2, 0x74, 0x86, 0x7a, 0x40, 0x9d, 0xe1, 0x9a, 0x4d, 0xa7, 0x62, 0x54, 0xca, 0xd0, 0x78,
	0xf7, 0x1b, 0x7b, 0x24, 0xd8, 0x03, 0xb7, 0x82, 0xe9, 0x2b, 0x70, 0xae, 0xd5, 0x8d, 0xb6, 0x8a,
	0x8d, 0x5a, 0x98, 0xd1, 0x06, 0xcb, 0x59, 0x2a, 0x43, 0x43, 0x0a, 0x7e, 0x13, 0x58, 0xbb, 0xe3,
	0xa2, 0x6f, 0xa1, 0x55, 0xe8, 0x93, 0xae, 0xa6, 0x3b, 0x7c, 0x72, 0x7f, 0x0a, 0x66, 0x33, 0x59,
	0xb2, 0x92, 0xae, 0x8c, 0x44, 0x81, 0x95, 0xa0, 0xda, 0x50, 0xa3, 0x13, 0x79, 0x2e, 0xa6, 0x38,
	0x95, 0x56, 0xd3, 0x85, 0x4d, 0x0f, 0xc0, 0x4d, 0x45, 0xc4, 0x65, 0x22, 0xa6, 0x5a, 0xd8, 0xee,
	0x70, 0xf3, 0x81, 0xab, 0x4e, 0x2c, 0x2d, 0x5c, 0x04, 0x04, 0x5b, 0xd0, 0xb2, 0xf5, 0xb6, 0xa1,
	0x79, 0x79, 0xfc, 0xa9, 0xf7, 0x1f, 0x75, 0x61, 0xe9, 0x43, 0x38, 0xba, 0xec, 0x11, 0x75, 0x3a,
	0x39, 0x3b, 0x3f, 0xef, 0x35, 0x82, 0xa7, 0xe0, 0x56, 0xc1, 0x0a, 0xfd, 0x78, 0x76, 0x7a, 0x68,
	0x98, 0xa3, 0xcb, 0xd1, 0x97, 0x1e, 0x09, 0x7e, 0x10, 0x58, 0x3d, 0x9a, 0xa9, 0x97, 0x52, 0xad,
	0xf6, 0xc1, 0xdd, 0xd5, 0x7e, 0x56, 0x09, 0x59, 0xa7, 0x31, 0xfb, 0x35, 0x92, 0x56, 0x11, 0xfe,
	0x3e, 0xac, 0xd4, 0x1d, 0xf7, 0xc8, 0xba, 0x5e, 0x97, 0x75, 0xb9, 0xa6, 0xe2, 0xf0, 0x27, 0x81,
	0xee, 0x91, 0x79, 0xb5, 0xe7, 0x58, 0xdc, 0x26, 0x11, 0xd2, 0x5d, 0x80, 0x31, 0xca, 0xaa, 0xb2,
	0x8d, 0x7f, 0x96, 0xf5, 0x50, 0x3d, 0x5f, 0xbf, 0x5b, 0x7f, 0x7b, 0x58, 0xd2, 0x1d, 0xe8, 0x8c,
	0x51, 0x2e, 0x36, 0xe2, 0xa1, 0xb0, 0x95, 0xfa, 0x82, 0xd2, 0x11, 0xfc, 0x3f, 0x46, 0x69, 0x7a,
	0xb4, 0x55, 0x3c, 0x7c, 0xe3, 0xfa, 0x7d, 0x23, 0x79, 0xff, 0x12, 0x9e, 0x47, 0x22, 0x63, 0x51,
	0x39, 0xc1, 0x7c, 0x97, 0xe5, 0x05, 0x66, 0x09, 0x16, 0x79, 0x81, 0x71, 0x12, 0x49, 0x51, 0x30,
	0xfb, 0x47, 0xfa, 0x4c, 0xae, 0x5a, 0x3a, 0xdd, 0xce, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x46,
	0x41, 0xf0, 0x7f, 0xa5, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FixtureServiceClient is the client API for FixtureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FixtureServiceClient interface {
	GetMatches(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Matches, error)
	GetTeamForm(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Forms, error)
	GetFutureFixtures(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FutureMatches, error)
}

type fixtureServiceClient struct {
	cc *grpc.ClientConn
}

func NewFixtureServiceClient(cc *grpc.ClientConn) FixtureServiceClient {
	return &fixtureServiceClient{cc}
}

func (c *fixtureServiceClient) GetMatches(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Matches, error) {
	out := new(Matches)
	err := c.cc.Invoke(ctx, "/model.FixtureService/GetMatches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fixtureServiceClient) GetTeamForm(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Forms, error) {
	out := new(Forms)
	err := c.cc.Invoke(ctx, "/model.FixtureService/GetTeamForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fixtureServiceClient) GetFutureFixtures(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FutureMatches, error) {
	out := new(FutureMatches)
	err := c.cc.Invoke(ctx, "/model.FixtureService/GetFutureFixtures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FixtureServiceServer is the server API for FixtureService service.
type FixtureServiceServer interface {
	GetMatches(context.Context, *empty.Empty) (*Matches, error)
	GetTeamForm(context.Context, *empty.Empty) (*Forms, error)
	GetFutureFixtures(context.Context, *empty.Empty) (*FutureMatches, error)
}

// UnimplementedFixtureServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFixtureServiceServer struct {
}

func (*UnimplementedFixtureServiceServer) GetMatches(ctx context.Context, req *empty.Empty) (*Matches, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatches not implemented")
}
func (*UnimplementedFixtureServiceServer) GetTeamForm(ctx context.Context, req *empty.Empty) (*Forms, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamForm not implemented")
}
func (*UnimplementedFixtureServiceServer) GetFutureFixtures(ctx context.Context, req *empty.Empty) (*FutureMatches, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFutureFixtures not implemented")
}

func RegisterFixtureServiceServer(s *grpc.Server, srv FixtureServiceServer) {
	s.RegisterService(&_FixtureService_serviceDesc, srv)
}

func _FixtureService_GetMatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FixtureServiceServer).GetMatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.FixtureService/GetMatches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FixtureServiceServer).GetMatches(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FixtureService_GetTeamForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FixtureServiceServer).GetTeamForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.FixtureService/GetTeamForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FixtureServiceServer).GetTeamForm(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FixtureService_GetFutureFixtures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FixtureServiceServer).GetFutureFixtures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.FixtureService/GetFutureFixtures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FixtureServiceServer).GetFutureFixtures(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _FixtureService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model.FixtureService",
	HandlerType: (*FixtureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMatches",
			Handler:    _FixtureService_GetMatches_Handler,
		},
		{
			MethodName: "GetTeamForm",
			Handler:    _FixtureService_GetTeamForm_Handler,
		},
		{
			MethodName: "GetFutureFixtures",
			Handler:    _FixtureService_GetFutureFixtures_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fixture.proto",
}
