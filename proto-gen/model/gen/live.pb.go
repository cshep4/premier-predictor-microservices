// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: live.proto

package model

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetLiveMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetLiveMatchRequest) Reset() {
	*x = GetLiveMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLiveMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLiveMatchRequest) ProtoMessage() {}

func (x *GetLiveMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLiveMatchRequest.ProtoReflect.Descriptor instead.
func (*GetLiveMatchRequest) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{0}
}

func (x *GetLiveMatchRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetLiveMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match *MatchFacts `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
}

func (x *GetLiveMatchResponse) Reset() {
	*x = GetLiveMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLiveMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLiveMatchResponse) ProtoMessage() {}

func (x *GetLiveMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLiveMatchResponse.ProtoReflect.Descriptor instead.
func (*GetLiveMatchResponse) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{1}
}

func (x *GetLiveMatchResponse) GetMatch() *MatchFacts {
	if x != nil {
		return x.Match
	}
	return nil
}

type ListTodaysMatchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListTodaysMatchesRequest) Reset() {
	*x = ListTodaysMatchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTodaysMatchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTodaysMatchesRequest) ProtoMessage() {}

func (x *ListTodaysMatchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTodaysMatchesRequest.ProtoReflect.Descriptor instead.
func (*ListTodaysMatchesRequest) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{2}
}

type ListTodaysMatchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matches []*MatchFacts `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`
}

func (x *ListTodaysMatchesResponse) Reset() {
	*x = ListTodaysMatchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTodaysMatchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTodaysMatchesResponse) ProtoMessage() {}

func (x *ListTodaysMatchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTodaysMatchesResponse.ProtoReflect.Descriptor instead.
func (*ListTodaysMatchesResponse) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{3}
}

func (x *ListTodaysMatchesResponse) GetMatches() []*MatchFacts {
	if x != nil {
		return x.Matches
	}
	return nil
}

type GetTodaysLiveMatchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTodaysLiveMatchesRequest) Reset() {
	*x = GetTodaysLiveMatchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTodaysLiveMatchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTodaysLiveMatchesRequest) ProtoMessage() {}

func (x *GetTodaysLiveMatchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTodaysLiveMatchesRequest.ProtoReflect.Descriptor instead.
func (*GetTodaysLiveMatchesRequest) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{4}
}

type GetTodaysLiveMatchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match *MatchFacts `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
}

func (x *GetTodaysLiveMatchesResponse) Reset() {
	*x = GetTodaysLiveMatchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTodaysLiveMatchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTodaysLiveMatchesResponse) ProtoMessage() {}

func (x *GetTodaysLiveMatchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTodaysLiveMatchesResponse.ProtoReflect.Descriptor instead.
func (*GetTodaysLiveMatchesResponse) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{5}
}

func (x *GetTodaysLiveMatchesResponse) GetMatch() *MatchFacts {
	if x != nil {
		return x.Match
	}
	return nil
}

type UpcomingMatchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matches map[string]*MatchFactsList `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpcomingMatchesResponse) Reset() {
	*x = UpcomingMatchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpcomingMatchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpcomingMatchesResponse) ProtoMessage() {}

func (x *UpcomingMatchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpcomingMatchesResponse.ProtoReflect.Descriptor instead.
func (*UpcomingMatchesResponse) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{6}
}

func (x *UpcomingMatchesResponse) GetMatches() map[string]*MatchFactsList {
	if x != nil {
		return x.Matches
	}
	return nil
}

type MatchSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match             *MatchFacts             `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	PredictionSummary *MatchPredictionSummary `protobuf:"bytes,2,opt,name=predictionSummary,proto3" json:"predictionSummary,omitempty"`
	Prediction        *Prediction             `protobuf:"bytes,3,opt,name=prediction,proto3" json:"prediction,omitempty"`
}

func (x *MatchSummary) Reset() {
	*x = MatchSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchSummary) ProtoMessage() {}

func (x *MatchSummary) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchSummary.ProtoReflect.Descriptor instead.
func (*MatchSummary) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{7}
}

func (x *MatchSummary) GetMatch() *MatchFacts {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *MatchSummary) GetPredictionSummary() *MatchPredictionSummary {
	if x != nil {
		return x.PredictionSummary
	}
	return nil
}

func (x *MatchSummary) GetPrediction() *Prediction {
	if x != nil {
		return x.Prediction
	}
	return nil
}

type MatchFactsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matches []*MatchFacts `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`
}

func (x *MatchFactsList) Reset() {
	*x = MatchFactsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchFactsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchFactsList) ProtoMessage() {}

func (x *MatchFactsList) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchFactsList.ProtoReflect.Descriptor instead.
func (*MatchFactsList) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{8}
}

func (x *MatchFactsList) GetMatches() []*MatchFacts {
	if x != nil {
		return x.Matches
	}
	return nil
}

type MatchFacts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CompId           string               `protobuf:"bytes,2,opt,name=compId,proto3" json:"compId,omitempty"`
	FormattedDate    string               `protobuf:"bytes,3,opt,name=formattedDate,proto3" json:"formattedDate,omitempty"`
	Season           string               `protobuf:"bytes,4,opt,name=season,proto3" json:"season,omitempty"`
	Week             string               `protobuf:"bytes,5,opt,name=week,proto3" json:"week,omitempty"`
	Venue            string               `protobuf:"bytes,6,opt,name=venue,proto3" json:"venue,omitempty"`
	VenueId          string               `protobuf:"bytes,7,opt,name=venueId,proto3" json:"venueId,omitempty"`
	VenueCity        string               `protobuf:"bytes,8,opt,name=venueCity,proto3" json:"venueCity,omitempty"`
	VenueLatitude    string               `protobuf:"bytes,9,opt,name=venueLatitude,proto3" json:"venueLatitude,omitempty"`
	VenueLongitude   string               `protobuf:"bytes,10,opt,name=venueLongitude,proto3" json:"venueLongitude,omitempty"`
	VenueCountry     string               `protobuf:"bytes,11,opt,name=venueCountry,proto3" json:"venueCountry,omitempty"`
	Status           string               `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	Timer            string               `protobuf:"bytes,13,opt,name=timer,proto3" json:"timer,omitempty"`
	Time             string               `protobuf:"bytes,14,opt,name=time,proto3" json:"time,omitempty"`
	LocalTeamId      string               `protobuf:"bytes,15,opt,name=localTeamId,proto3" json:"localTeamId,omitempty"`
	LocalTeamName    string               `protobuf:"bytes,16,opt,name=localTeamName,proto3" json:"localTeamName,omitempty"`
	LocalTeamScore   string               `protobuf:"bytes,17,opt,name=localTeamScore,proto3" json:"localTeamScore,omitempty"`
	VisitorTeamId    string               `protobuf:"bytes,18,opt,name=visitorTeamId,proto3" json:"visitorTeamId,omitempty"`
	VisitorTeamName  string               `protobuf:"bytes,19,opt,name=visitorTeamName,proto3" json:"visitorTeamName,omitempty"`
	VisitorTeamScore string               `protobuf:"bytes,20,opt,name=visitorTeamScore,proto3" json:"visitorTeamScore,omitempty"`
	HtScore          string               `protobuf:"bytes,21,opt,name=htScore,proto3" json:"htScore,omitempty"`
	FtScore          string               `protobuf:"bytes,22,opt,name=ftScore,proto3" json:"ftScore,omitempty"`
	EtScore          string               `protobuf:"bytes,23,opt,name=etScore,proto3" json:"etScore,omitempty"`
	PenaltyLocal     string               `protobuf:"bytes,24,opt,name=penaltyLocal,proto3" json:"penaltyLocal,omitempty"`
	PenaltyVisitor   string               `protobuf:"bytes,25,opt,name=penaltyVisitor,proto3" json:"penaltyVisitor,omitempty"`
	Events           []*Event             `protobuf:"bytes,26,rep,name=events,proto3" json:"events,omitempty"`
	Commentary       *Commentary          `protobuf:"bytes,27,opt,name=commentary,proto3" json:"commentary,omitempty"`
	MatchDate        *timestamp.Timestamp `protobuf:"bytes,28,opt,name=matchDate,proto3" json:"matchDate,omitempty"`
}

func (x *MatchFacts) Reset() {
	*x = MatchFacts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchFacts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchFacts) ProtoMessage() {}

func (x *MatchFacts) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchFacts.ProtoReflect.Descriptor instead.
func (*MatchFacts) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{9}
}

func (x *MatchFacts) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MatchFacts) GetCompId() string {
	if x != nil {
		return x.CompId
	}
	return ""
}

func (x *MatchFacts) GetFormattedDate() string {
	if x != nil {
		return x.FormattedDate
	}
	return ""
}

func (x *MatchFacts) GetSeason() string {
	if x != nil {
		return x.Season
	}
	return ""
}

func (x *MatchFacts) GetWeek() string {
	if x != nil {
		return x.Week
	}
	return ""
}

func (x *MatchFacts) GetVenue() string {
	if x != nil {
		return x.Venue
	}
	return ""
}

func (x *MatchFacts) GetVenueId() string {
	if x != nil {
		return x.VenueId
	}
	return ""
}

func (x *MatchFacts) GetVenueCity() string {
	if x != nil {
		return x.VenueCity
	}
	return ""
}

func (x *MatchFacts) GetVenueLatitude() string {
	if x != nil {
		return x.VenueLatitude
	}
	return ""
}

func (x *MatchFacts) GetVenueLongitude() string {
	if x != nil {
		return x.VenueLongitude
	}
	return ""
}

func (x *MatchFacts) GetVenueCountry() string {
	if x != nil {
		return x.VenueCountry
	}
	return ""
}

func (x *MatchFacts) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MatchFacts) GetTimer() string {
	if x != nil {
		return x.Timer
	}
	return ""
}

func (x *MatchFacts) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *MatchFacts) GetLocalTeamId() string {
	if x != nil {
		return x.LocalTeamId
	}
	return ""
}

func (x *MatchFacts) GetLocalTeamName() string {
	if x != nil {
		return x.LocalTeamName
	}
	return ""
}

func (x *MatchFacts) GetLocalTeamScore() string {
	if x != nil {
		return x.LocalTeamScore
	}
	return ""
}

func (x *MatchFacts) GetVisitorTeamId() string {
	if x != nil {
		return x.VisitorTeamId
	}
	return ""
}

func (x *MatchFacts) GetVisitorTeamName() string {
	if x != nil {
		return x.VisitorTeamName
	}
	return ""
}

func (x *MatchFacts) GetVisitorTeamScore() string {
	if x != nil {
		return x.VisitorTeamScore
	}
	return ""
}

func (x *MatchFacts) GetHtScore() string {
	if x != nil {
		return x.HtScore
	}
	return ""
}

func (x *MatchFacts) GetFtScore() string {
	if x != nil {
		return x.FtScore
	}
	return ""
}

func (x *MatchFacts) GetEtScore() string {
	if x != nil {
		return x.EtScore
	}
	return ""
}

func (x *MatchFacts) GetPenaltyLocal() string {
	if x != nil {
		return x.PenaltyLocal
	}
	return ""
}

func (x *MatchFacts) GetPenaltyVisitor() string {
	if x != nil {
		return x.PenaltyVisitor
	}
	return ""
}

func (x *MatchFacts) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *MatchFacts) GetCommentary() *Commentary {
	if x != nil {
		return x.Commentary
	}
	return nil
}

func (x *MatchFacts) GetMatchDate() *timestamp.Timestamp {
	if x != nil {
		return x.MatchDate
	}
	return nil
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type     string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Result   string `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	Minute   string `protobuf:"bytes,4,opt,name=minute,proto3" json:"minute,omitempty"`
	ExtraMin string `protobuf:"bytes,5,opt,name=extraMin,proto3" json:"extraMin,omitempty"`
	Team     string `protobuf:"bytes,6,opt,name=team,proto3" json:"team,omitempty"`
	Player   string `protobuf:"bytes,7,opt,name=player,proto3" json:"player,omitempty"`
	PlayerId string `protobuf:"bytes,8,opt,name=playerId,proto3" json:"playerId,omitempty"`
	Assist   string `protobuf:"bytes,9,opt,name=assist,proto3" json:"assist,omitempty"`
	AssistId string `protobuf:"bytes,10,opt,name=assistId,proto3" json:"assistId,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{10}
}

func (x *Event) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Event) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Event) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *Event) GetMinute() string {
	if x != nil {
		return x.Minute
	}
	return ""
}

func (x *Event) GetExtraMin() string {
	if x != nil {
		return x.ExtraMin
	}
	return ""
}

func (x *Event) GetTeam() string {
	if x != nil {
		return x.Team
	}
	return ""
}

func (x *Event) GetPlayer() string {
	if x != nil {
		return x.Player
	}
	return ""
}

func (x *Event) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *Event) GetAssist() string {
	if x != nil {
		return x.Assist
	}
	return ""
}

func (x *Event) GetAssistId() string {
	if x != nil {
		return x.AssistId
	}
	return ""
}

type Commentary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId       string         `protobuf:"bytes,1,opt,name=matchId,proto3" json:"matchId,omitempty"`
	MatchInfo     *MatchInfo     `protobuf:"bytes,2,opt,name=matchInfo,proto3" json:"matchInfo,omitempty"`
	Lineup        *Lineup        `protobuf:"bytes,3,opt,name=lineup,proto3" json:"lineup,omitempty"`
	Subs          *Lineup        `protobuf:"bytes,4,opt,name=subs,proto3" json:"subs,omitempty"`
	Substitutions *Substitutions `protobuf:"bytes,5,opt,name=substitutions,proto3" json:"substitutions,omitempty"`
	Comments      []*Comment     `protobuf:"bytes,6,rep,name=comments,proto3" json:"comments,omitempty"`
	MatchStats    *MatchStats    `protobuf:"bytes,7,opt,name=matchStats,proto3" json:"matchStats,omitempty"`
	PlayerStats   *PlayerStats   `protobuf:"bytes,8,opt,name=playerStats,proto3" json:"playerStats,omitempty"`
}

func (x *Commentary) Reset() {
	*x = Commentary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commentary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commentary) ProtoMessage() {}

func (x *Commentary) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commentary.ProtoReflect.Descriptor instead.
func (*Commentary) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{11}
}

func (x *Commentary) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *Commentary) GetMatchInfo() *MatchInfo {
	if x != nil {
		return x.MatchInfo
	}
	return nil
}

func (x *Commentary) GetLineup() *Lineup {
	if x != nil {
		return x.Lineup
	}
	return nil
}

func (x *Commentary) GetSubs() *Lineup {
	if x != nil {
		return x.Subs
	}
	return nil
}

func (x *Commentary) GetSubstitutions() *Substitutions {
	if x != nil {
		return x.Substitutions
	}
	return nil
}

func (x *Commentary) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *Commentary) GetMatchStats() *MatchStats {
	if x != nil {
		return x.MatchStats
	}
	return nil
}

func (x *Commentary) GetPlayerStats() *PlayerStats {
	if x != nil {
		return x.PlayerStats
	}
	return nil
}

type MatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stadium    string `protobuf:"bytes,1,opt,name=stadium,proto3" json:"stadium,omitempty"`
	Attendance string `protobuf:"bytes,2,opt,name=attendance,proto3" json:"attendance,omitempty"`
	Referee    string `protobuf:"bytes,3,opt,name=referee,proto3" json:"referee,omitempty"`
}

func (x *MatchInfo) Reset() {
	*x = MatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchInfo) ProtoMessage() {}

func (x *MatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchInfo.ProtoReflect.Descriptor instead.
func (*MatchInfo) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{12}
}

func (x *MatchInfo) GetStadium() string {
	if x != nil {
		return x.Stadium
	}
	return ""
}

func (x *MatchInfo) GetAttendance() string {
	if x != nil {
		return x.Attendance
	}
	return ""
}

func (x *MatchInfo) GetReferee() string {
	if x != nil {
		return x.Referee
	}
	return ""
}

type Lineup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalTeam   []*Position `protobuf:"bytes,1,rep,name=localTeam,proto3" json:"localTeam,omitempty"`
	VisitorTeam []*Position `protobuf:"bytes,3,rep,name=visitorTeam,proto3" json:"visitorTeam,omitempty"`
}

func (x *Lineup) Reset() {
	*x = Lineup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lineup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lineup) ProtoMessage() {}

func (x *Lineup) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lineup.ProtoReflect.Descriptor instead.
func (*Lineup) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{13}
}

func (x *Lineup) GetLocalTeam() []*Position {
	if x != nil {
		return x.LocalTeam
	}
	return nil
}

func (x *Lineup) GetVisitorTeam() []*Position {
	if x != nil {
		return x.VisitorTeam
	}
	return nil
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Number string `protobuf:"bytes,2,opt,name=number,proto3" json:"number,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Pos    string `protobuf:"bytes,4,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{14}
}

func (x *Position) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Position) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *Position) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Position) GetPos() string {
	if x != nil {
		return x.Pos
	}
	return ""
}

type Substitutions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalTeam   []*Substitution `protobuf:"bytes,1,rep,name=localTeam,proto3" json:"localTeam,omitempty"`
	VisitorTeam []*Substitution `protobuf:"bytes,2,rep,name=visitorTeam,proto3" json:"visitorTeam,omitempty"`
}

func (x *Substitutions) Reset() {
	*x = Substitutions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Substitutions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Substitutions) ProtoMessage() {}

func (x *Substitutions) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Substitutions.ProtoReflect.Descriptor instead.
func (*Substitutions) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{15}
}

func (x *Substitutions) GetLocalTeam() []*Substitution {
	if x != nil {
		return x.LocalTeam
	}
	return nil
}

func (x *Substitutions) GetVisitorTeam() []*Substitution {
	if x != nil {
		return x.VisitorTeam
	}
	return nil
}

type Substitution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OffName string `protobuf:"bytes,1,opt,name=offName,proto3" json:"offName,omitempty"`
	OnName  string `protobuf:"bytes,2,opt,name=onName,proto3" json:"onName,omitempty"`
	OffId   string `protobuf:"bytes,3,opt,name=offId,proto3" json:"offId,omitempty"`
	OnId    string `protobuf:"bytes,4,opt,name=onId,proto3" json:"onId,omitempty"`
	Minute  string `protobuf:"bytes,5,opt,name=minute,proto3" json:"minute,omitempty"`
	TableId string `protobuf:"bytes,6,opt,name=tableId,proto3" json:"tableId,omitempty"`
}

func (x *Substitution) Reset() {
	*x = Substitution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Substitution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Substitution) ProtoMessage() {}

func (x *Substitution) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Substitution.ProtoReflect.Descriptor instead.
func (*Substitution) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{16}
}

func (x *Substitution) GetOffName() string {
	if x != nil {
		return x.OffName
	}
	return ""
}

func (x *Substitution) GetOnName() string {
	if x != nil {
		return x.OnName
	}
	return ""
}

func (x *Substitution) GetOffId() string {
	if x != nil {
		return x.OffId
	}
	return ""
}

func (x *Substitution) GetOnId() string {
	if x != nil {
		return x.OnId
	}
	return ""
}

func (x *Substitution) GetMinute() string {
	if x != nil {
		return x.Minute
	}
	return ""
}

func (x *Substitution) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

type Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Important string `protobuf:"bytes,2,opt,name=important,proto3" json:"important,omitempty"`
	Goal      string `protobuf:"bytes,3,opt,name=goal,proto3" json:"goal,omitempty"`
	Minute    string `protobuf:"bytes,4,opt,name=minute,proto3" json:"minute,omitempty"`
	Comment   string `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *Comment) Reset() {
	*x = Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{17}
}

func (x *Comment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Comment) GetImportant() string {
	if x != nil {
		return x.Important
	}
	return ""
}

func (x *Comment) GetGoal() string {
	if x != nil {
		return x.Goal
	}
	return ""
}

func (x *Comment) GetMinute() string {
	if x != nil {
		return x.Minute
	}
	return ""
}

func (x *Comment) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type MatchStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalTeam   []*TeamStats `protobuf:"bytes,1,rep,name=localTeam,proto3" json:"localTeam,omitempty"`
	VisitorTeam []*TeamStats `protobuf:"bytes,2,rep,name=visitorTeam,proto3" json:"visitorTeam,omitempty"`
}

func (x *MatchStats) Reset() {
	*x = MatchStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchStats) ProtoMessage() {}

func (x *MatchStats) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchStats.ProtoReflect.Descriptor instead.
func (*MatchStats) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{18}
}

func (x *MatchStats) GetLocalTeam() []*TeamStats {
	if x != nil {
		return x.LocalTeam
	}
	return nil
}

func (x *MatchStats) GetVisitorTeam() []*TeamStats {
	if x != nil {
		return x.VisitorTeam
	}
	return nil
}

type TeamStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShotsTotal     string `protobuf:"bytes,1,opt,name=shotsTotal,proto3" json:"shotsTotal,omitempty"`
	ShotsOnGoal    string `protobuf:"bytes,2,opt,name=shotsOnGoal,proto3" json:"shotsOnGoal,omitempty"`
	Fouls          string `protobuf:"bytes,3,opt,name=fouls,proto3" json:"fouls,omitempty"`
	Corners        string `protobuf:"bytes,4,opt,name=corners,proto3" json:"corners,omitempty"`
	Offsides       string `protobuf:"bytes,5,opt,name=offsides,proto3" json:"offsides,omitempty"`
	PossessionTime string `protobuf:"bytes,6,opt,name=possessionTime,proto3" json:"possessionTime,omitempty"`
	YellowCards    string `protobuf:"bytes,7,opt,name=yellowCards,proto3" json:"yellowCards,omitempty"`
	RedCards       string `protobuf:"bytes,8,opt,name=redCards,proto3" json:"redCards,omitempty"`
	Saves          string `protobuf:"bytes,9,opt,name=saves,proto3" json:"saves,omitempty"`
	TableId        string `protobuf:"bytes,10,opt,name=tableId,proto3" json:"tableId,omitempty"`
}

func (x *TeamStats) Reset() {
	*x = TeamStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamStats) ProtoMessage() {}

func (x *TeamStats) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamStats.ProtoReflect.Descriptor instead.
func (*TeamStats) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{19}
}

func (x *TeamStats) GetShotsTotal() string {
	if x != nil {
		return x.ShotsTotal
	}
	return ""
}

func (x *TeamStats) GetShotsOnGoal() string {
	if x != nil {
		return x.ShotsOnGoal
	}
	return ""
}

func (x *TeamStats) GetFouls() string {
	if x != nil {
		return x.Fouls
	}
	return ""
}

func (x *TeamStats) GetCorners() string {
	if x != nil {
		return x.Corners
	}
	return ""
}

func (x *TeamStats) GetOffsides() string {
	if x != nil {
		return x.Offsides
	}
	return ""
}

func (x *TeamStats) GetPossessionTime() string {
	if x != nil {
		return x.PossessionTime
	}
	return ""
}

func (x *TeamStats) GetYellowCards() string {
	if x != nil {
		return x.YellowCards
	}
	return ""
}

func (x *TeamStats) GetRedCards() string {
	if x != nil {
		return x.RedCards
	}
	return ""
}

func (x *TeamStats) GetSaves() string {
	if x != nil {
		return x.Saves
	}
	return ""
}

func (x *TeamStats) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

type PlayerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalTeam   *Players `protobuf:"bytes,1,opt,name=localTeam,proto3" json:"localTeam,omitempty"`
	VisitorTeam *Players `protobuf:"bytes,2,opt,name=visitorTeam,proto3" json:"visitorTeam,omitempty"`
}

func (x *PlayerStats) Reset() {
	*x = PlayerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStats) ProtoMessage() {}

func (x *PlayerStats) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStats.ProtoReflect.Descriptor instead.
func (*PlayerStats) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{20}
}

func (x *PlayerStats) GetLocalTeam() *Players {
	if x != nil {
		return x.LocalTeam
	}
	return nil
}

func (x *PlayerStats) GetVisitorTeam() *Players {
	if x != nil {
		return x.VisitorTeam
	}
	return nil
}

type Players struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player []*Player `protobuf:"bytes,1,rep,name=player,proto3" json:"player,omitempty"`
}

func (x *Players) Reset() {
	*x = Players{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Players) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Players) ProtoMessage() {}

func (x *Players) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Players.ProtoReflect.Descriptor instead.
func (*Players) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{21}
}

func (x *Players) GetPlayer() []*Player {
	if x != nil {
		return x.Player
	}
	return nil
}

type Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Num            string `protobuf:"bytes,2,opt,name=num,proto3" json:"num,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Pos            string `protobuf:"bytes,4,opt,name=pos,proto3" json:"pos,omitempty"`
	PosX           string `protobuf:"bytes,5,opt,name=posX,proto3" json:"posX,omitempty"`
	PosY           string `protobuf:"bytes,6,opt,name=posY,proto3" json:"posY,omitempty"`
	ShotsTotal     string `protobuf:"bytes,7,opt,name=shotsTotal,proto3" json:"shotsTotal,omitempty"`
	ShotsOnGoal    string `protobuf:"bytes,8,opt,name=shotsOnGoal,proto3" json:"shotsOnGoal,omitempty"`
	Goals          string `protobuf:"bytes,9,opt,name=goals,proto3" json:"goals,omitempty"`
	Assists        string `protobuf:"bytes,10,opt,name=assists,proto3" json:"assists,omitempty"`
	Offsides       string `protobuf:"bytes,11,opt,name=offsides,proto3" json:"offsides,omitempty"`
	FoulsDrawn     string `protobuf:"bytes,12,opt,name=foulsDrawn,proto3" json:"foulsDrawn,omitempty"`
	FoulsCommitted string `protobuf:"bytes,13,opt,name=foulsCommitted,proto3" json:"foulsCommitted,omitempty"`
	Saves          string `protobuf:"bytes,14,opt,name=saves,proto3" json:"saves,omitempty"`
	YellowCards    string `protobuf:"bytes,15,opt,name=yellowCards,proto3" json:"yellowCards,omitempty"`
	RedCards       string `protobuf:"bytes,16,opt,name=redCards,proto3" json:"redCards,omitempty"`
	PenScore       string `protobuf:"bytes,17,opt,name=penScore,proto3" json:"penScore,omitempty"`
	PenMiss        string `protobuf:"bytes,18,opt,name=penMiss,proto3" json:"penMiss,omitempty"`
}

func (x *Player) Reset() {
	*x = Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{22}
}

func (x *Player) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Player) GetNum() string {
	if x != nil {
		return x.Num
	}
	return ""
}

func (x *Player) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Player) GetPos() string {
	if x != nil {
		return x.Pos
	}
	return ""
}

func (x *Player) GetPosX() string {
	if x != nil {
		return x.PosX
	}
	return ""
}

func (x *Player) GetPosY() string {
	if x != nil {
		return x.PosY
	}
	return ""
}

func (x *Player) GetShotsTotal() string {
	if x != nil {
		return x.ShotsTotal
	}
	return ""
}

func (x *Player) GetShotsOnGoal() string {
	if x != nil {
		return x.ShotsOnGoal
	}
	return ""
}

func (x *Player) GetGoals() string {
	if x != nil {
		return x.Goals
	}
	return ""
}

func (x *Player) GetAssists() string {
	if x != nil {
		return x.Assists
	}
	return ""
}

func (x *Player) GetOffsides() string {
	if x != nil {
		return x.Offsides
	}
	return ""
}

func (x *Player) GetFoulsDrawn() string {
	if x != nil {
		return x.FoulsDrawn
	}
	return ""
}

func (x *Player) GetFoulsCommitted() string {
	if x != nil {
		return x.FoulsCommitted
	}
	return ""
}

func (x *Player) GetSaves() string {
	if x != nil {
		return x.Saves
	}
	return ""
}

func (x *Player) GetYellowCards() string {
	if x != nil {
		return x.YellowCards
	}
	return ""
}

func (x *Player) GetRedCards() string {
	if x != nil {
		return x.RedCards
	}
	return ""
}

func (x *Player) GetPenScore() string {
	if x != nil {
		return x.PenScore
	}
	return ""
}

func (x *Player) GetPenMiss() string {
	if x != nil {
		return x.PenMiss
	}
	return ""
}

var File_live_proto protoreflect.FileDescriptor

var file_live_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x10, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x25, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3f, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x27, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x61,
	0x63, 0x74, 0x73, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x1a, 0x0a, 0x18, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x48, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f,
	0x64, 0x61, 0x79, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x46, 0x61, 0x63, 0x74, 0x73, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x22, 0x1d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x73, 0x4c, 0x69, 0x76,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x47, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x73, 0x4c, 0x69, 0x76, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x27, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x61, 0x63, 0x74,
	0x73, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x22, 0xb3, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x63,
	0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x55, 0x70,
	0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x1a, 0x51, 0x0a, 0x0c, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x61, 0x63, 0x74, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb7,
	0x01, 0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x27, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x61, 0x63, 0x74,
	0x73, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x4b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x11, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3d, 0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x46, 0x61, 0x63, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x61, 0x63, 0x74, 0x73, 0x52, 0x07,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22, 0xa1, 0x07, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x46, 0x61, 0x63, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x70, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x77, 0x65, 0x65, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x65, 0x65, 0x6b,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x43, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x43, 0x69, 0x74, 0x79, 0x12, 0x24,
	0x0a, 0x0d, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x4c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x4c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65,
	0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x61,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x69, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x69, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x65, 0x61,
	0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x69,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x68, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x68, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x74, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x74, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x12, 0x26, 0x0a, 0x0e, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x56, 0x69, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74,
	0x79, 0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72,
	0x79, 0x12, 0x38, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x4d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x4d, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x49,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x49,
	0x64, 0x22, 0xf1, 0x02, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x06, 0x6c, 0x69,
	0x6e, 0x65, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x75,
	0x70, 0x12, 0x21, 0x0a, 0x04, 0x73, 0x75, 0x62, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x52, 0x04,
	0x73, 0x75, 0x62, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x0a,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x34, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x5f, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x22, 0x6a, 0x0a, 0x06, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70,
	0x12, 0x2d, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x12,
	0x31, 0x0a, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x65,
	0x61, 0x6d, 0x22, 0x58, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0x79, 0x0a, 0x0d,
	0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a,
	0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x61, 0x6d,
	0x12, 0x35, 0x0a, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x76, 0x69, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x22, 0x9c, 0x01, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73,
	0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x66,
	0x66, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x66, 0x66, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67,
	0x6f, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x70, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x61, 0x6d,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54,
	0x65, 0x61, 0x6d, 0x12, 0x32, 0x0a, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x65,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b, 0x76, 0x69, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x22, 0xaf, 0x02, 0x0a, 0x09, 0x54, 0x65, 0x61, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x74, 0x73,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x4f, 0x6e,
	0x47, 0x6f, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x4f, 0x6e, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x75, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6f, 0x75, 0x6c, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x69,
	0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x69,
	0x64, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6f, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x79,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x61, 0x76,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x61, 0x76, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x0b, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x54, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x09, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x30, 0x0a, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x54, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x0b, 0x76, 0x69, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x22, 0x30, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0xd8, 0x03, 0x0a, 0x06, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x73, 0x58, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x73,
	0x58, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x59, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x6f, 0x73, 0x59, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x74, 0x73,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x4f, 0x6e,
	0x47, 0x6f, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x4f, 0x6e, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x69,
	0x64, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x69,
	0x64, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x75, 0x6c, 0x73, 0x44, 0x72, 0x61, 0x77,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x75, 0x6c, 0x73, 0x44, 0x72,
	0x61, 0x77, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x6f, 0x75, 0x6c, 0x73, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x6f, 0x75,
	0x6c, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x61, 0x76, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x61, 0x76, 0x65,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x65, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x65, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x65, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x65,
	0x6e, 0x4d, 0x69, 0x73, 0x73, 0x32, 0xaa, 0x03, 0x0a, 0x10, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x55, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x55, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x42, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x18, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x30, 0x01, 0x12, 0x47,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1a,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x6f, 0x64, 0x61, 0x79, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x73, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x73,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x61, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x73, 0x4c, 0x69, 0x76, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x73, 0x4c, 0x69, 0x76,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x42, 0x29, 0x0a, 0x25, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x73, 0x68, 0x65, 0x70, 0x34,
	0x2e, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x65, 0x72, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x01, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_live_proto_rawDescOnce sync.Once
	file_live_proto_rawDescData = file_live_proto_rawDesc
)

func file_live_proto_rawDescGZIP() []byte {
	file_live_proto_rawDescOnce.Do(func() {
		file_live_proto_rawDescData = protoimpl.X.CompressGZIP(file_live_proto_rawDescData)
	})
	return file_live_proto_rawDescData
}

var file_live_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_live_proto_goTypes = []interface{}{
	(*GetLiveMatchRequest)(nil),          // 0: model.GetLiveMatchRequest
	(*GetLiveMatchResponse)(nil),         // 1: model.GetLiveMatchResponse
	(*ListTodaysMatchesRequest)(nil),     // 2: model.ListTodaysMatchesRequest
	(*ListTodaysMatchesResponse)(nil),    // 3: model.ListTodaysMatchesResponse
	(*GetTodaysLiveMatchesRequest)(nil),  // 4: model.GetTodaysLiveMatchesRequest
	(*GetTodaysLiveMatchesResponse)(nil), // 5: model.GetTodaysLiveMatchesResponse
	(*UpcomingMatchesResponse)(nil),      // 6: model.UpcomingMatchesResponse
	(*MatchSummary)(nil),                 // 7: model.MatchSummary
	(*MatchFactsList)(nil),               // 8: model.MatchFactsList
	(*MatchFacts)(nil),                   // 9: model.MatchFacts
	(*Event)(nil),                        // 10: model.Event
	(*Commentary)(nil),                   // 11: model.Commentary
	(*MatchInfo)(nil),                    // 12: model.MatchInfo
	(*Lineup)(nil),                       // 13: model.Lineup
	(*Position)(nil),                     // 14: model.Position
	(*Substitutions)(nil),                // 15: model.Substitutions
	(*Substitution)(nil),                 // 16: model.Substitution
	(*Comment)(nil),                      // 17: model.Comment
	(*MatchStats)(nil),                   // 18: model.MatchStats
	(*TeamStats)(nil),                    // 19: model.TeamStats
	(*PlayerStats)(nil),                  // 20: model.PlayerStats
	(*Players)(nil),                      // 21: model.Players
	(*Player)(nil),                       // 22: model.Player
	nil,                                  // 23: model.UpcomingMatchesResponse.MatchesEntry
	(*MatchPredictionSummary)(nil),       // 24: model.MatchPredictionSummary
	(*Prediction)(nil),                   // 25: model.Prediction
	(*timestamp.Timestamp)(nil),          // 26: google.protobuf.Timestamp
	(*empty.Empty)(nil),                  // 27: google.protobuf.Empty
	(*PredictionRequest)(nil),            // 28: model.PredictionRequest
}
var file_live_proto_depIdxs = []int32{
	9,  // 0: model.GetLiveMatchResponse.match:type_name -> model.MatchFacts
	9,  // 1: model.ListTodaysMatchesResponse.matches:type_name -> model.MatchFacts
	9,  // 2: model.GetTodaysLiveMatchesResponse.match:type_name -> model.MatchFacts
	23, // 3: model.UpcomingMatchesResponse.matches:type_name -> model.UpcomingMatchesResponse.MatchesEntry
	9,  // 4: model.MatchSummary.match:type_name -> model.MatchFacts
	24, // 5: model.MatchSummary.predictionSummary:type_name -> model.MatchPredictionSummary
	25, // 6: model.MatchSummary.prediction:type_name -> model.Prediction
	9,  // 7: model.MatchFactsList.matches:type_name -> model.MatchFacts
	10, // 8: model.MatchFacts.events:type_name -> model.Event
	11, // 9: model.MatchFacts.commentary:type_name -> model.Commentary
	26, // 10: model.MatchFacts.matchDate:type_name -> google.protobuf.Timestamp
	12, // 11: model.Commentary.matchInfo:type_name -> model.MatchInfo
	13, // 12: model.Commentary.lineup:type_name -> model.Lineup
	13, // 13: model.Commentary.subs:type_name -> model.Lineup
	15, // 14: model.Commentary.substitutions:type_name -> model.Substitutions
	17, // 15: model.Commentary.comments:type_name -> model.Comment
	18, // 16: model.Commentary.matchStats:type_name -> model.MatchStats
	20, // 17: model.Commentary.playerStats:type_name -> model.PlayerStats
	14, // 18: model.Lineup.localTeam:type_name -> model.Position
	14, // 19: model.Lineup.visitorTeam:type_name -> model.Position
	16, // 20: model.Substitutions.localTeam:type_name -> model.Substitution
	16, // 21: model.Substitutions.visitorTeam:type_name -> model.Substitution
	19, // 22: model.MatchStats.localTeam:type_name -> model.TeamStats
	19, // 23: model.MatchStats.visitorTeam:type_name -> model.TeamStats
	21, // 24: model.PlayerStats.localTeam:type_name -> model.Players
	21, // 25: model.PlayerStats.visitorTeam:type_name -> model.Players
	22, // 26: model.Players.player:type_name -> model.Player
	8,  // 27: model.UpcomingMatchesResponse.MatchesEntry.value:type_name -> model.MatchFactsList
	27, // 28: model.LiveMatchService.GetUpcomingMatches:input_type -> google.protobuf.Empty
	28, // 29: model.LiveMatchService.GetMatchSummary:input_type -> model.PredictionRequest
	0,  // 30: model.LiveMatchService.GetLiveMatch:input_type -> model.GetLiveMatchRequest
	2,  // 31: model.LiveMatchService.ListTodaysMatches:input_type -> model.ListTodaysMatchesRequest
	4,  // 32: model.LiveMatchService.GetTodaysLiveMatches:input_type -> model.GetTodaysLiveMatchesRequest
	6,  // 33: model.LiveMatchService.GetUpcomingMatches:output_type -> model.UpcomingMatchesResponse
	7,  // 34: model.LiveMatchService.GetMatchSummary:output_type -> model.MatchSummary
	1,  // 35: model.LiveMatchService.GetLiveMatch:output_type -> model.GetLiveMatchResponse
	3,  // 36: model.LiveMatchService.ListTodaysMatches:output_type -> model.ListTodaysMatchesResponse
	5,  // 37: model.LiveMatchService.GetTodaysLiveMatches:output_type -> model.GetTodaysLiveMatchesResponse
	33, // [33:38] is the sub-list for method output_type
	28, // [28:33] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_live_proto_init() }
func file_live_proto_init() {
	if File_live_proto != nil {
		return
	}
	file_request_proto_init()
	file_prediction_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_live_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLiveMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLiveMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTodaysMatchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTodaysMatchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTodaysLiveMatchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTodaysLiveMatchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpcomingMatchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchFactsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchFacts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Commentary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lineup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Substitutions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Substitution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Players); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_live_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_live_proto_goTypes,
		DependencyIndexes: file_live_proto_depIdxs,
		MessageInfos:      file_live_proto_msgTypes,
	}.Build()
	File_live_proto = out.File
	file_live_proto_rawDesc = nil
	file_live_proto_goTypes = nil
	file_live_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LiveMatchServiceClient is the client API for LiveMatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LiveMatchServiceClient interface {
	GetUpcomingMatches(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (LiveMatchService_GetUpcomingMatchesClient, error)
	GetMatchSummary(ctx context.Context, in *PredictionRequest, opts ...grpc.CallOption) (LiveMatchService_GetMatchSummaryClient, error)
	GetLiveMatch(ctx context.Context, in *GetLiveMatchRequest, opts ...grpc.CallOption) (*GetLiveMatchResponse, error)
	ListTodaysMatches(ctx context.Context, in *ListTodaysMatchesRequest, opts ...grpc.CallOption) (*ListTodaysMatchesResponse, error)
	GetTodaysLiveMatches(ctx context.Context, in *GetTodaysLiveMatchesRequest, opts ...grpc.CallOption) (LiveMatchService_GetTodaysLiveMatchesClient, error)
}

type liveMatchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveMatchServiceClient(cc grpc.ClientConnInterface) LiveMatchServiceClient {
	return &liveMatchServiceClient{cc}
}

func (c *liveMatchServiceClient) GetUpcomingMatches(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (LiveMatchService_GetUpcomingMatchesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LiveMatchService_serviceDesc.Streams[0], "/model.LiveMatchService/GetUpcomingMatches", opts...)
	if err != nil {
		return nil, err
	}
	x := &liveMatchServiceGetUpcomingMatchesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LiveMatchService_GetUpcomingMatchesClient interface {
	Recv() (*UpcomingMatchesResponse, error)
	grpc.ClientStream
}

type liveMatchServiceGetUpcomingMatchesClient struct {
	grpc.ClientStream
}

func (x *liveMatchServiceGetUpcomingMatchesClient) Recv() (*UpcomingMatchesResponse, error) {
	m := new(UpcomingMatchesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *liveMatchServiceClient) GetMatchSummary(ctx context.Context, in *PredictionRequest, opts ...grpc.CallOption) (LiveMatchService_GetMatchSummaryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LiveMatchService_serviceDesc.Streams[1], "/model.LiveMatchService/GetMatchSummary", opts...)
	if err != nil {
		return nil, err
	}
	x := &liveMatchServiceGetMatchSummaryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LiveMatchService_GetMatchSummaryClient interface {
	Recv() (*MatchSummary, error)
	grpc.ClientStream
}

type liveMatchServiceGetMatchSummaryClient struct {
	grpc.ClientStream
}

func (x *liveMatchServiceGetMatchSummaryClient) Recv() (*MatchSummary, error) {
	m := new(MatchSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *liveMatchServiceClient) GetLiveMatch(ctx context.Context, in *GetLiveMatchRequest, opts ...grpc.CallOption) (*GetLiveMatchResponse, error) {
	out := new(GetLiveMatchResponse)
	err := c.cc.Invoke(ctx, "/model.LiveMatchService/GetLiveMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveMatchServiceClient) ListTodaysMatches(ctx context.Context, in *ListTodaysMatchesRequest, opts ...grpc.CallOption) (*ListTodaysMatchesResponse, error) {
	out := new(ListTodaysMatchesResponse)
	err := c.cc.Invoke(ctx, "/model.LiveMatchService/ListTodaysMatches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveMatchServiceClient) GetTodaysLiveMatches(ctx context.Context, in *GetTodaysLiveMatchesRequest, opts ...grpc.CallOption) (LiveMatchService_GetTodaysLiveMatchesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LiveMatchService_serviceDesc.Streams[2], "/model.LiveMatchService/GetTodaysLiveMatches", opts...)
	if err != nil {
		return nil, err
	}
	x := &liveMatchServiceGetTodaysLiveMatchesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LiveMatchService_GetTodaysLiveMatchesClient interface {
	Recv() (*GetTodaysLiveMatchesResponse, error)
	grpc.ClientStream
}

type liveMatchServiceGetTodaysLiveMatchesClient struct {
	grpc.ClientStream
}

func (x *liveMatchServiceGetTodaysLiveMatchesClient) Recv() (*GetTodaysLiveMatchesResponse, error) {
	m := new(GetTodaysLiveMatchesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LiveMatchServiceServer is the server API for LiveMatchService service.
type LiveMatchServiceServer interface {
	GetUpcomingMatches(*empty.Empty, LiveMatchService_GetUpcomingMatchesServer) error
	GetMatchSummary(*PredictionRequest, LiveMatchService_GetMatchSummaryServer) error
	GetLiveMatch(context.Context, *GetLiveMatchRequest) (*GetLiveMatchResponse, error)
	ListTodaysMatches(context.Context, *ListTodaysMatchesRequest) (*ListTodaysMatchesResponse, error)
	GetTodaysLiveMatches(*GetTodaysLiveMatchesRequest, LiveMatchService_GetTodaysLiveMatchesServer) error
}

// UnimplementedLiveMatchServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLiveMatchServiceServer struct {
}

func (*UnimplementedLiveMatchServiceServer) GetUpcomingMatches(*empty.Empty, LiveMatchService_GetUpcomingMatchesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUpcomingMatches not implemented")
}
func (*UnimplementedLiveMatchServiceServer) GetMatchSummary(*PredictionRequest, LiveMatchService_GetMatchSummaryServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMatchSummary not implemented")
}
func (*UnimplementedLiveMatchServiceServer) GetLiveMatch(context.Context, *GetLiveMatchRequest) (*GetLiveMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveMatch not implemented")
}
func (*UnimplementedLiveMatchServiceServer) ListTodaysMatches(context.Context, *ListTodaysMatchesRequest) (*ListTodaysMatchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTodaysMatches not implemented")
}
func (*UnimplementedLiveMatchServiceServer) GetTodaysLiveMatches(*GetTodaysLiveMatchesRequest, LiveMatchService_GetTodaysLiveMatchesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTodaysLiveMatches not implemented")
}

func RegisterLiveMatchServiceServer(s *grpc.Server, srv LiveMatchServiceServer) {
	s.RegisterService(&_LiveMatchService_serviceDesc, srv)
}

func _LiveMatchService_GetUpcomingMatches_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LiveMatchServiceServer).GetUpcomingMatches(m, &liveMatchServiceGetUpcomingMatchesServer{stream})
}

type LiveMatchService_GetUpcomingMatchesServer interface {
	Send(*UpcomingMatchesResponse) error
	grpc.ServerStream
}

type liveMatchServiceGetUpcomingMatchesServer struct {
	grpc.ServerStream
}

func (x *liveMatchServiceGetUpcomingMatchesServer) Send(m *UpcomingMatchesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _LiveMatchService_GetMatchSummary_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PredictionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LiveMatchServiceServer).GetMatchSummary(m, &liveMatchServiceGetMatchSummaryServer{stream})
}

type LiveMatchService_GetMatchSummaryServer interface {
	Send(*MatchSummary) error
	grpc.ServerStream
}

type liveMatchServiceGetMatchSummaryServer struct {
	grpc.ServerStream
}

func (x *liveMatchServiceGetMatchSummaryServer) Send(m *MatchSummary) error {
	return x.ServerStream.SendMsg(m)
}

func _LiveMatchService_GetLiveMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiveMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveMatchServiceServer).GetLiveMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.LiveMatchService/GetLiveMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveMatchServiceServer).GetLiveMatch(ctx, req.(*GetLiveMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveMatchService_ListTodaysMatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTodaysMatchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveMatchServiceServer).ListTodaysMatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.LiveMatchService/ListTodaysMatches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveMatchServiceServer).ListTodaysMatches(ctx, req.(*ListTodaysMatchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveMatchService_GetTodaysLiveMatches_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTodaysLiveMatchesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LiveMatchServiceServer).GetTodaysLiveMatches(m, &liveMatchServiceGetTodaysLiveMatchesServer{stream})
}

type LiveMatchService_GetTodaysLiveMatchesServer interface {
	Send(*GetTodaysLiveMatchesResponse) error
	grpc.ServerStream
}

type liveMatchServiceGetTodaysLiveMatchesServer struct {
	grpc.ServerStream
}

func (x *liveMatchServiceGetTodaysLiveMatchesServer) Send(m *GetTodaysLiveMatchesResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _LiveMatchService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model.LiveMatchService",
	HandlerType: (*LiveMatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLiveMatch",
			Handler:    _LiveMatchService_GetLiveMatch_Handler,
		},
		{
			MethodName: "ListTodaysMatches",
			Handler:    _LiveMatchService_ListTodaysMatches_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUpcomingMatches",
			Handler:       _LiveMatchService_GetUpcomingMatches_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMatchSummary",
			Handler:       _LiveMatchService_GetMatchSummary_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTodaysLiveMatches",
			Handler:       _LiveMatchService_GetTodaysLiveMatches_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "live.proto",
}
