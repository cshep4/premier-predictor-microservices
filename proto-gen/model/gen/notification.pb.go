// Code generated by protoc-gen-go. DO NOT EDIT.
// source: notification.proto

package model

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-timer assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UpdateReadRequest struct {
	UserId               string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	NotificationId       string   `protobuf:"bytes,2,opt,name=notificationId,proto3" json:"notificationId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateReadRequest) Reset()         { *m = UpdateReadRequest{} }
func (m *UpdateReadRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateReadRequest) ProtoMessage()    {}
func (*UpdateReadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_736a457d4a5efa07, []int{0}
}

func (m *UpdateReadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateReadRequest.Unmarshal(m, b)
}
func (m *UpdateReadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateReadRequest.Marshal(b, m, deterministic)
}
func (m *UpdateReadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateReadRequest.Merge(m, src)
}
func (m *UpdateReadRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateReadRequest.Size(m)
}
func (m *UpdateReadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateReadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateReadRequest proto.InternalMessageInfo

func (m *UpdateReadRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UpdateReadRequest) GetNotificationId() string {
	if m != nil {
		return m.NotificationId
	}
	return ""
}

type NotificationResponse struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotificationResponse) Reset()         { *m = NotificationResponse{} }
func (m *NotificationResponse) String() string { return proto.CompactTextString(m) }
func (*NotificationResponse) ProtoMessage()    {}
func (*NotificationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_736a457d4a5efa07, []int{1}
}

func (m *NotificationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotificationResponse.Unmarshal(m, b)
}
func (m *NotificationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotificationResponse.Marshal(b, m, deterministic)
}
func (m *NotificationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotificationResponse.Merge(m, src)
}
func (m *NotificationResponse) XXX_Size() int {
	return xxx_messageInfo_NotificationResponse.Size(m)
}
func (m *NotificationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NotificationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NotificationResponse proto.InternalMessageInfo

func (m *NotificationResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NotificationResponse) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *NotificationResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SaveRequest struct {
	UserId               string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	NotificationToken    string   `protobuf:"bytes,2,opt,name=notificationToken,proto3" json:"notificationToken,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SaveRequest) Reset()         { *m = SaveRequest{} }
func (m *SaveRequest) String() string { return proto.CompactTextString(m) }
func (*SaveRequest) ProtoMessage()    {}
func (*SaveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_736a457d4a5efa07, []int{2}
}

func (m *SaveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaveRequest.Unmarshal(m, b)
}
func (m *SaveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaveRequest.Marshal(b, m, deterministic)
}
func (m *SaveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveRequest.Merge(m, src)
}
func (m *SaveRequest) XXX_Size() int {
	return xxx_messageInfo_SaveRequest.Size(m)
}
func (m *SaveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SaveRequest proto.InternalMessageInfo

func (m *SaveRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *SaveRequest) GetNotificationToken() string {
	if m != nil {
		return m.NotificationToken
	}
	return ""
}

type SingleRequest struct {
	UserId               string        `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Notification         *Notification `protobuf:"bytes,2,opt,name=notification,proto3" json:"notification,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SingleRequest) Reset()         { *m = SingleRequest{} }
func (m *SingleRequest) String() string { return proto.CompactTextString(m) }
func (*SingleRequest) ProtoMessage()    {}
func (*SingleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_736a457d4a5efa07, []int{3}
}

func (m *SingleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleRequest.Unmarshal(m, b)
}
func (m *SingleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleRequest.Marshal(b, m, deterministic)
}
func (m *SingleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleRequest.Merge(m, src)
}
func (m *SingleRequest) XXX_Size() int {
	return xxx_messageInfo_SingleRequest.Size(m)
}
func (m *SingleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SingleRequest proto.InternalMessageInfo

func (m *SingleRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *SingleRequest) GetNotification() *Notification {
	if m != nil {
		return m.Notification
	}
	return nil
}

type GroupRequest struct {
	UserIds              []string      `protobuf:"bytes,1,rep,name=userIds,proto3" json:"userIds,omitempty"`
	Notification         *Notification `protobuf:"bytes,2,opt,name=notification,proto3" json:"notification,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GroupRequest) Reset()         { *m = GroupRequest{} }
func (m *GroupRequest) String() string { return proto.CompactTextString(m) }
func (*GroupRequest) ProtoMessage()    {}
func (*GroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_736a457d4a5efa07, []int{4}
}

func (m *GroupRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupRequest.Unmarshal(m, b)
}
func (m *GroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupRequest.Marshal(b, m, deterministic)
}
func (m *GroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupRequest.Merge(m, src)
}
func (m *GroupRequest) XXX_Size() int {
	return xxx_messageInfo_GroupRequest.Size(m)
}
func (m *GroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GroupRequest proto.InternalMessageInfo

func (m *GroupRequest) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *GroupRequest) GetNotification() *Notification {
	if m != nil {
		return m.Notification
	}
	return nil
}

type Notification struct {
	Title                string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Notification) Reset()         { *m = Notification{} }
func (m *Notification) String() string { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()    {}
func (*Notification) Descriptor() ([]byte, []int) {
	return fileDescriptor_736a457d4a5efa07, []int{5}
}

func (m *Notification) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Notification.Unmarshal(m, b)
}
func (m *Notification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Notification.Marshal(b, m, deterministic)
}
func (m *Notification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notification.Merge(m, src)
}
func (m *Notification) XXX_Size() int {
	return xxx_messageInfo_Notification.Size(m)
}
func (m *Notification) XXX_DiscardUnknown() {
	xxx_messageInfo_Notification.DiscardUnknown(m)
}

var xxx_messageInfo_Notification proto.InternalMessageInfo

func (m *Notification) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Notification) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*UpdateReadRequest)(nil), "model.UpdateReadRequest")
	proto.RegisterType((*NotificationResponse)(nil), "model.NotificationResponse")
	proto.RegisterType((*SaveRequest)(nil), "model.SaveRequest")
	proto.RegisterType((*SingleRequest)(nil), "model.SingleRequest")
	proto.RegisterType((*GroupRequest)(nil), "model.GroupRequest")
	proto.RegisterType((*Notification)(nil), "model.Notification")
}

func init() { proto.RegisterFile("notification.proto", fileDescriptor_736a457d4a5efa07) }

var fileDescriptor_736a457d4a5efa07 = []byte{
	// 437 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xdf, 0x4b, 0xdc, 0x40,
	0x10, 0x36, 0x77, 0x55, 0xeb, 0xdc, 0x29, 0x3a, 0x1e, 0x47, 0x38, 0x5f, 0x24, 0x0f, 0xc5, 0x07,
	0x59, 0x8b, 0x2d, 0x6d, 0x29, 0xa5, 0xd0, 0x82, 0xc8, 0x41, 0x29, 0x25, 0xd1, 0x3e, 0x37, 0x66,
	0xc7, 0x74, 0x69, 0x92, 0xdd, 0xee, 0x6e, 0x84, 0xfe, 0x23, 0xfd, 0x7b, 0x4b, 0x92, 0x0d, 0x6e,
	0xaa, 0x9e, 0xe0, 0xe3, 0xfc, 0xf8, 0xbe, 0x99, 0xf9, 0x66, 0x06, 0xb0, 0x92, 0x56, 0x5c, 0x8b,
	0x2c, 0xb5, 0x42, 0x56, 0x4c, 0x69, 0x69, 0x25, 0xae, 0x97, 0x92, 0x53, 0xb1, 0x38, 0xc8, 0xa5,
	0xcc, 0x0b, 0x3a, 0x69, 0x9d, 0x57, 0xf5, 0xf5, 0x09, 0x95, 0xca, 0xfe, 0xe9, 0x72, 0x16, 0xdb,
	0x9a, 0x7e, 0xd7, 0x64, 0x6c, 0x67, 0x46, 0x09, 0xec, 0x5d, 0x2a, 0x9e, 0x5a, 0x8a, 0x29, 0xe5,
	0x71, 0x17, 0xc2, 0x39, 0x6c, 0xd4, 0x86, 0xf4, 0x92, 0x87, 0xc1, 0x61, 0x70, 0xb4, 0x15, 0x3b,
	0x0b, 0x5f, 0xc0, 0x8e, 0x5f, 0x75, 0xc9, 0xc3, 0x51, 0x1b, 0xff, 0xcf, 0x1b, 0x7d, 0x87, 0xd9,
	0x57, 0xcf, 0x13, 0x93, 0x51, 0xb2, 0x32, 0x84, 0x3b, 0x30, 0x12, 0x3d, 0xe7, 0x48, 0x70, 0x9c,
	0xc1, 0xba, 0x15, 0xb6, 0x20, 0x47, 0xd3, 0x19, 0x18, 0xc2, 0x66, 0x49, 0xc6, 0xa4, 0x39, 0x85,
	0xe3, 0xd6, 0xdf, 0x9b, 0x51, 0x02, 0x93, 0x24, 0xbd, 0xa1, 0xc7, 0xda, 0x3c, 0x86, 0x3d, 0xbf,
	0xa1, 0x0b, 0xf9, 0x8b, 0x2a, 0x57, 0xe2, 0x6e, 0x20, 0xfa, 0x01, 0xdb, 0x89, 0xa8, 0xf2, 0xe2,
	0x51, 0xda, 0xb7, 0x30, 0xf5, 0xd1, 0x2d, 0xe3, 0xe4, 0x74, 0x9f, 0xb5, 0xa2, 0xb3, 0xc1, 0xc0,
	0x83, 0xc4, 0x28, 0x85, 0xe9, 0xb9, 0x96, 0xb5, 0xea, 0x0b, 0x84, 0xb0, 0xd9, 0x51, 0x9a, 0x30,
	0x38, 0x1c, 0x37, 0x03, 0x3a, 0xf3, 0xe9, 0x25, 0x3e, 0xc2, 0xd4, 0x8f, 0xde, 0x2a, 0x1b, 0x3c,
	0xa0, 0xec, 0x68, 0xa0, 0xec, 0xe9, 0xdf, 0x31, 0xec, 0xfb, 0x04, 0x09, 0xe9, 0x1b, 0x91, 0x11,
	0xbe, 0x83, 0xe7, 0x8d, 0xe2, 0x97, 0x86, 0x34, 0xa2, 0x6b, 0xc3, 0x5b, 0xc1, 0x62, 0xce, 0xba,
	0x5b, 0x63, 0xfd, 0xad, 0xb1, 0xb3, 0xe6, 0xd6, 0xa2, 0x35, 0x7c, 0x03, 0xcf, 0x12, 0xaa, 0x38,
	0xce, 0x7a, 0x94, 0xaf, 0xf1, 0x0a, 0xdc, 0x07, 0x98, 0x34, 0xb8, 0x0b, 0xd9, 0x4a, 0x86, 0xfd,
	0xec, 0xbe, 0x80, 0x2b, 0xd0, 0xef, 0x61, 0xab, 0x43, 0x7f, 0x2a, 0x0a, 0xbc, 0x4f, 0xb7, 0x15,
	0xd8, 0x33, 0xd8, 0x3d, 0x27, 0xeb, 0x27, 0x1b, 0xdc, 0x75, 0x14, 0xcb, 0xfe, 0x37, 0x16, 0x07,
	0xf7, 0x2d, 0xc3, 0x1d, 0x78, 0xb4, 0xf6, 0x32, 0xc0, 0x2f, 0x30, 0xbf, 0xfd, 0xa8, 0xc1, 0x52,
	0x42, 0x07, 0xbd, 0xf3, 0x70, 0x0f, 0x37, 0xf5, 0xf9, 0x18, 0x8e, 0x32, 0x59, 0xb2, 0xcc, 0xfc,
	0x24, 0xf5, 0x9a, 0x29, 0x4d, 0xa5, 0x20, 0xad, 0x34, 0x71, 0x91, 0x59, 0xa9, 0x99, 0x7f, 0x04,
	0xdf, 0x82, 0xab, 0x8d, 0x16, 0xff, 0xea, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x17, 0x4a, 0xfe,
	0x11, 0x1d, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-timer assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotificationServiceClient interface {
	SaveUser(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Send(ctx context.Context, in *SingleRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SendToGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SendToAll(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*empty.Empty, error)
	GetNotifications(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (NotificationService_GetNotificationsClient, error)
	UpdateReadNotification(ctx context.Context, in *UpdateReadRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type notificationServiceClient struct {
	cc *grpc.ClientConn
}

func NewNotificationServiceClient(cc *grpc.ClientConn) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) SaveUser(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/model.NotificationService/SaveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) Send(ctx context.Context, in *SingleRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/model.NotificationService/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendToGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/model.NotificationService/SendToGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendToAll(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/model.NotificationService/SendToAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetNotifications(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (NotificationService_GetNotificationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NotificationService_serviceDesc.Streams[0], "/model.NotificationService/GetNotifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &notificationServiceGetNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NotificationService_GetNotificationsClient interface {
	Recv() (*NotificationResponse, error)
	grpc.ClientStream
}

type notificationServiceGetNotificationsClient struct {
	grpc.ClientStream
}

func (x *notificationServiceGetNotificationsClient) Recv() (*NotificationResponse, error) {
	m := new(NotificationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *notificationServiceClient) UpdateReadNotification(ctx context.Context, in *UpdateReadRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/model.NotificationService/UpdateReadNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
type NotificationServiceServer interface {
	SaveUser(context.Context, *SaveRequest) (*empty.Empty, error)
	Send(context.Context, *SingleRequest) (*empty.Empty, error)
	SendToGroup(context.Context, *GroupRequest) (*empty.Empty, error)
	SendToAll(context.Context, *Notification) (*empty.Empty, error)
	GetNotifications(*IdRequest, NotificationService_GetNotificationsServer) error
	UpdateReadNotification(context.Context, *UpdateReadRequest) (*empty.Empty, error)
}

// UnimplementedNotificationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNotificationServiceServer struct {
}

func (*UnimplementedNotificationServiceServer) SaveUser(ctx context.Context, req *SaveRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUser not implemented")
}
func (*UnimplementedNotificationServiceServer) Send(ctx context.Context, req *SingleRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (*UnimplementedNotificationServiceServer) SendToGroup(ctx context.Context, req *GroupRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToGroup not implemented")
}
func (*UnimplementedNotificationServiceServer) SendToAll(ctx context.Context, req *Notification) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToAll not implemented")
}
func (*UnimplementedNotificationServiceServer) GetNotifications(req *IdRequest, srv NotificationService_GetNotificationsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNotifications not implemented")
}
func (*UnimplementedNotificationServiceServer) UpdateReadNotification(ctx context.Context, req *UpdateReadRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReadNotification not implemented")
}

func RegisterNotificationServiceServer(s *grpc.Server, srv NotificationServiceServer) {
	s.RegisterService(&_NotificationService_serviceDesc, srv)
}

func _NotificationService_SaveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SaveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.NotificationService/SaveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SaveUser(ctx, req.(*SaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.NotificationService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).Send(ctx, req.(*SingleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.NotificationService/SendToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendToGroup(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendToAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendToAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.NotificationService/SendToAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendToAll(ctx, req.(*Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotificationServiceServer).GetNotifications(m, &notificationServiceGetNotificationsServer{stream})
}

type NotificationService_GetNotificationsServer interface {
	Send(*NotificationResponse) error
	grpc.ServerStream
}

type notificationServiceGetNotificationsServer struct {
	grpc.ServerStream
}

func (x *notificationServiceGetNotificationsServer) Send(m *NotificationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NotificationService_UpdateReadNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).UpdateReadNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.NotificationService/UpdateReadNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).UpdateReadNotification(ctx, req.(*UpdateReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotificationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveUser",
			Handler:    _NotificationService_SaveUser_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _NotificationService_Send_Handler,
		},
		{
			MethodName: "SendToGroup",
			Handler:    _NotificationService_SendToGroup_Handler,
		},
		{
			MethodName: "SendToAll",
			Handler:    _NotificationService_SendToAll_Handler,
		},
		{
			MethodName: "UpdateReadNotification",
			Handler:    _NotificationService_UpdateReadNotification_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetNotifications",
			Handler:       _NotificationService_GetNotifications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "notification.proto",
}
