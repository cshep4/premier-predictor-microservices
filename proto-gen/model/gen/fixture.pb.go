// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: fixture.proto

package model

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TeamMatchResult_Result int32

const (
	TeamMatchResult_WIN  TeamMatchResult_Result = 0
	TeamMatchResult_DRAW TeamMatchResult_Result = 1
	TeamMatchResult_LOSS TeamMatchResult_Result = 2
)

// Enum value maps for TeamMatchResult_Result.
var (
	TeamMatchResult_Result_name = map[int32]string{
		0: "WIN",
		1: "DRAW",
		2: "LOSS",
	}
	TeamMatchResult_Result_value = map[string]int32{
		"WIN":  0,
		"DRAW": 1,
		"LOSS": 2,
	}
)

func (x TeamMatchResult_Result) Enum() *TeamMatchResult_Result {
	p := new(TeamMatchResult_Result)
	*p = x
	return p
}

func (x TeamMatchResult_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TeamMatchResult_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_fixture_proto_enumTypes[0].Descriptor()
}

func (TeamMatchResult_Result) Type() protoreflect.EnumType {
	return &file_fixture_proto_enumTypes[0]
}

func (x TeamMatchResult_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TeamMatchResult_Result.Descriptor instead.
func (TeamMatchResult_Result) EnumDescriptor() ([]byte, []int) {
	return file_fixture_proto_rawDescGZIP(), []int{4, 0}
}

type TeamMatchResult_Location int32

const (
	TeamMatchResult_HOME TeamMatchResult_Location = 0
	TeamMatchResult_AWAY TeamMatchResult_Location = 1
)

// Enum value maps for TeamMatchResult_Location.
var (
	TeamMatchResult_Location_name = map[int32]string{
		0: "HOME",
		1: "AWAY",
	}
	TeamMatchResult_Location_value = map[string]int32{
		"HOME": 0,
		"AWAY": 1,
	}
)

func (x TeamMatchResult_Location) Enum() *TeamMatchResult_Location {
	p := new(TeamMatchResult_Location)
	*p = x
	return p
}

func (x TeamMatchResult_Location) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TeamMatchResult_Location) Descriptor() protoreflect.EnumDescriptor {
	return file_fixture_proto_enumTypes[1].Descriptor()
}

func (TeamMatchResult_Location) Type() protoreflect.EnumType {
	return &file_fixture_proto_enumTypes[1]
}

func (x TeamMatchResult_Location) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TeamMatchResult_Location.Descriptor instead.
func (TeamMatchResult_Location) EnumDescriptor() ([]byte, []int) {
	return file_fixture_proto_rawDescGZIP(), []int{4, 1}
}

type Matches struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matches []*Match `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`
}

func (x *Matches) Reset() {
	*x = Matches{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fixture_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Matches) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Matches) ProtoMessage() {}

func (x *Matches) ProtoReflect() protoreflect.Message {
	mi := &file_fixture_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Matches.ProtoReflect.Descriptor instead.
func (*Matches) Descriptor() ([]byte, []int) {
	return file_fixture_proto_rawDescGZIP(), []int{0}
}

func (x *Matches) GetMatches() []*Match {
	if x != nil {
		return x.Matches
	}
	return nil
}

type Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	HTeam    string               `protobuf:"bytes,2,opt,name=hTeam,proto3" json:"hTeam,omitempty"`
	ATeam    string               `protobuf:"bytes,3,opt,name=aTeam,proto3" json:"aTeam,omitempty"`
	HGoals   int32                `protobuf:"varint,4,opt,name=hGoals,proto3" json:"hGoals,omitempty"`
	AGoals   int32                `protobuf:"varint,5,opt,name=aGoals,proto3" json:"aGoals,omitempty"`
	Played   int32                `protobuf:"varint,6,opt,name=played,proto3" json:"played,omitempty"`
	DateTime *timestamp.Timestamp `protobuf:"bytes,7,opt,name=dateTime,proto3" json:"dateTime,omitempty"`
	Matchday int32                `protobuf:"varint,8,opt,name=matchday,proto3" json:"matchday,omitempty"`
}

func (x *Match) Reset() {
	*x = Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fixture_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match) ProtoMessage() {}

func (x *Match) ProtoReflect() protoreflect.Message {
	mi := &file_fixture_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match.ProtoReflect.Descriptor instead.
func (*Match) Descriptor() ([]byte, []int) {
	return file_fixture_proto_rawDescGZIP(), []int{1}
}

func (x *Match) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Match) GetHTeam() string {
	if x != nil {
		return x.HTeam
	}
	return ""
}

func (x *Match) GetATeam() string {
	if x != nil {
		return x.ATeam
	}
	return ""
}

func (x *Match) GetHGoals() int32 {
	if x != nil {
		return x.HGoals
	}
	return 0
}

func (x *Match) GetAGoals() int32 {
	if x != nil {
		return x.AGoals
	}
	return 0
}

func (x *Match) GetPlayed() int32 {
	if x != nil {
		return x.Played
	}
	return 0
}

func (x *Match) GetDateTime() *timestamp.Timestamp {
	if x != nil {
		return x.DateTime
	}
	return nil
}

func (x *Match) GetMatchday() int32 {
	if x != nil {
		return x.Matchday
	}
	return 0
}

type Forms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teams map[string]*TeamForm `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Forms) Reset() {
	*x = Forms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fixture_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Forms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Forms) ProtoMessage() {}

func (x *Forms) ProtoReflect() protoreflect.Message {
	mi := &file_fixture_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Forms.ProtoReflect.Descriptor instead.
func (*Forms) Descriptor() ([]byte, []int) {
	return file_fixture_proto_rawDescGZIP(), []int{2}
}

func (x *Forms) GetTeams() map[string]*TeamForm {
	if x != nil {
		return x.Teams
	}
	return nil
}

type TeamForm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Forms []*TeamMatchResult `protobuf:"bytes,1,rep,name=forms,proto3" json:"forms,omitempty"`
}

func (x *TeamForm) Reset() {
	*x = TeamForm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fixture_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamForm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamForm) ProtoMessage() {}

func (x *TeamForm) ProtoReflect() protoreflect.Message {
	mi := &file_fixture_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamForm.ProtoReflect.Descriptor instead.
func (*TeamForm) Descriptor() ([]byte, []int) {
	return file_fixture_proto_rawDescGZIP(), []int{3}
}

func (x *TeamForm) GetForms() []*TeamMatchResult {
	if x != nil {
		return x.Forms
	}
	return nil
}

type TeamMatchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result   TeamMatchResult_Result   `protobuf:"varint,1,opt,name=result,proto3,enum=model.TeamMatchResult_Result" json:"result,omitempty"`
	Score    string                   `protobuf:"bytes,2,opt,name=score,proto3" json:"score,omitempty"`
	Opponent string                   `protobuf:"bytes,3,opt,name=opponent,proto3" json:"opponent,omitempty"`
	Location TeamMatchResult_Location `protobuf:"varint,4,opt,name=location,proto3,enum=model.TeamMatchResult_Location" json:"location,omitempty"`
}

func (x *TeamMatchResult) Reset() {
	*x = TeamMatchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fixture_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamMatchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamMatchResult) ProtoMessage() {}

func (x *TeamMatchResult) ProtoReflect() protoreflect.Message {
	mi := &file_fixture_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamMatchResult.ProtoReflect.Descriptor instead.
func (*TeamMatchResult) Descriptor() ([]byte, []int) {
	return file_fixture_proto_rawDescGZIP(), []int{4}
}

func (x *TeamMatchResult) GetResult() TeamMatchResult_Result {
	if x != nil {
		return x.Result
	}
	return TeamMatchResult_WIN
}

func (x *TeamMatchResult) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *TeamMatchResult) GetOpponent() string {
	if x != nil {
		return x.Opponent
	}
	return ""
}

func (x *TeamMatchResult) GetLocation() TeamMatchResult_Location {
	if x != nil {
		return x.Location
	}
	return TeamMatchResult_HOME
}

type FutureMatches struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matches map[string]string `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FutureMatches) Reset() {
	*x = FutureMatches{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fixture_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FutureMatches) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FutureMatches) ProtoMessage() {}

func (x *FutureMatches) ProtoReflect() protoreflect.Message {
	mi := &file_fixture_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FutureMatches.ProtoReflect.Descriptor instead.
func (*FutureMatches) Descriptor() ([]byte, []int) {
	return file_fixture_proto_rawDescGZIP(), []int{5}
}

func (x *FutureMatches) GetMatches() map[string]string {
	if x != nil {
		return x.Matches
	}
	return nil
}

var File_fixture_proto protoreflect.FileDescriptor

var file_fixture_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x31, 0x0a, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x54, 0x65, 0x61, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68,
	0x47, 0x6f, 0x61, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x64, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x64, 0x61, 0x79, 0x22, 0x81, 0x01, 0x0a, 0x05, 0x46, 0x6f,
	0x72, 0x6d, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x73,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x74, 0x65, 0x61,
	0x6d, 0x73, 0x1a, 0x49, 0x0a, 0x0a, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x46, 0x6f,
	0x72, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x38, 0x0a,
	0x08, 0x54, 0x65, 0x61, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x2c, 0x0a, 0x05, 0x66, 0x6f, 0x72,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x05, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x22, 0xfe, 0x01, 0x0a, 0x0f, 0x54, 0x65, 0x61, 0x6d,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x25, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x07, 0x0a, 0x03, 0x57,
	0x49, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x52, 0x41, 0x57, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x4c, 0x4f, 0x53, 0x53, 0x10, 0x02, 0x22, 0x1e, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x41, 0x57, 0x41, 0x59, 0x10, 0x01, 0x22, 0x88, 0x01, 0x0a, 0x0d, 0x46, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x32, 0xc4, 0x01, 0x0a, 0x0e, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0e, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22, 0x00, 0x12, 0x35,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6f,
	0x72, 0x6d, 0x73, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22, 0x00, 0x42, 0x27, 0x0a, 0x23, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x73, 0x68, 0x65, 0x70, 0x34, 0x2e, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x65, 0x72,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72,
	0x65, 0x50, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fixture_proto_rawDescOnce sync.Once
	file_fixture_proto_rawDescData = file_fixture_proto_rawDesc
)

func file_fixture_proto_rawDescGZIP() []byte {
	file_fixture_proto_rawDescOnce.Do(func() {
		file_fixture_proto_rawDescData = protoimpl.X.CompressGZIP(file_fixture_proto_rawDescData)
	})
	return file_fixture_proto_rawDescData
}

var file_fixture_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_fixture_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_fixture_proto_goTypes = []interface{}{
	(TeamMatchResult_Result)(0),   // 0: model.TeamMatchResult.Result
	(TeamMatchResult_Location)(0), // 1: model.TeamMatchResult.Location
	(*Matches)(nil),               // 2: model.Matches
	(*Match)(nil),                 // 3: model.Match
	(*Forms)(nil),                 // 4: model.Forms
	(*TeamForm)(nil),              // 5: model.TeamForm
	(*TeamMatchResult)(nil),       // 6: model.TeamMatchResult
	(*FutureMatches)(nil),         // 7: model.FutureMatches
	nil,                           // 8: model.Forms.TeamsEntry
	nil,                           // 9: model.FutureMatches.MatchesEntry
	(*timestamp.Timestamp)(nil),   // 10: google.protobuf.Timestamp
	(*empty.Empty)(nil),           // 11: google.protobuf.Empty
}
var file_fixture_proto_depIdxs = []int32{
	3,  // 0: model.Matches.matches:type_name -> model.Match
	10, // 1: model.Match.dateTime:type_name -> google.protobuf.Timestamp
	8,  // 2: model.Forms.teams:type_name -> model.Forms.TeamsEntry
	6,  // 3: model.TeamForm.forms:type_name -> model.TeamMatchResult
	0,  // 4: model.TeamMatchResult.result:type_name -> model.TeamMatchResult.Result
	1,  // 5: model.TeamMatchResult.location:type_name -> model.TeamMatchResult.Location
	9,  // 6: model.FutureMatches.matches:type_name -> model.FutureMatches.MatchesEntry
	5,  // 7: model.Forms.TeamsEntry.value:type_name -> model.TeamForm
	11, // 8: model.FixtureService.GetMatches:input_type -> google.protobuf.Empty
	11, // 9: model.FixtureService.GetTeamForm:input_type -> google.protobuf.Empty
	11, // 10: model.FixtureService.GetFutureFixtures:input_type -> google.protobuf.Empty
	2,  // 11: model.FixtureService.GetMatches:output_type -> model.Matches
	4,  // 12: model.FixtureService.GetTeamForm:output_type -> model.Forms
	7,  // 13: model.FixtureService.GetFutureFixtures:output_type -> model.FutureMatches
	11, // [11:14] is the sub-list for method output_type
	8,  // [8:11] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_fixture_proto_init() }
func file_fixture_proto_init() {
	if File_fixture_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fixture_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Matches); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fixture_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fixture_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Forms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fixture_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamForm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fixture_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamMatchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fixture_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FutureMatches); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fixture_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fixture_proto_goTypes,
		DependencyIndexes: file_fixture_proto_depIdxs,
		EnumInfos:         file_fixture_proto_enumTypes,
		MessageInfos:      file_fixture_proto_msgTypes,
	}.Build()
	File_fixture_proto = out.File
	file_fixture_proto_rawDesc = nil
	file_fixture_proto_goTypes = nil
	file_fixture_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FixtureServiceClient is the client API for FixtureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FixtureServiceClient interface {
	GetMatches(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Matches, error)
	GetTeamForm(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Forms, error)
	GetFutureFixtures(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FutureMatches, error)
}

type fixtureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFixtureServiceClient(cc grpc.ClientConnInterface) FixtureServiceClient {
	return &fixtureServiceClient{cc}
}

func (c *fixtureServiceClient) GetMatches(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Matches, error) {
	out := new(Matches)
	err := c.cc.Invoke(ctx, "/model.FixtureService/GetMatches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fixtureServiceClient) GetTeamForm(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Forms, error) {
	out := new(Forms)
	err := c.cc.Invoke(ctx, "/model.FixtureService/GetTeamForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fixtureServiceClient) GetFutureFixtures(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FutureMatches, error) {
	out := new(FutureMatches)
	err := c.cc.Invoke(ctx, "/model.FixtureService/GetFutureFixtures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FixtureServiceServer is the server API for FixtureService service.
type FixtureServiceServer interface {
	GetMatches(context.Context, *empty.Empty) (*Matches, error)
	GetTeamForm(context.Context, *empty.Empty) (*Forms, error)
	GetFutureFixtures(context.Context, *empty.Empty) (*FutureMatches, error)
}

// UnimplementedFixtureServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFixtureServiceServer struct {
}

func (*UnimplementedFixtureServiceServer) GetMatches(context.Context, *empty.Empty) (*Matches, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatches not implemented")
}
func (*UnimplementedFixtureServiceServer) GetTeamForm(context.Context, *empty.Empty) (*Forms, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamForm not implemented")
}
func (*UnimplementedFixtureServiceServer) GetFutureFixtures(context.Context, *empty.Empty) (*FutureMatches, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFutureFixtures not implemented")
}

func RegisterFixtureServiceServer(s *grpc.Server, srv FixtureServiceServer) {
	s.RegisterService(&_FixtureService_serviceDesc, srv)
}

func _FixtureService_GetMatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FixtureServiceServer).GetMatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.FixtureService/GetMatches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FixtureServiceServer).GetMatches(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FixtureService_GetTeamForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FixtureServiceServer).GetTeamForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.FixtureService/GetTeamForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FixtureServiceServer).GetTeamForm(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FixtureService_GetFutureFixtures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FixtureServiceServer).GetFutureFixtures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.FixtureService/GetFutureFixtures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FixtureServiceServer).GetFutureFixtures(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _FixtureService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model.FixtureService",
	HandlerType: (*FixtureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMatches",
			Handler:    _FixtureService_GetMatches_Handler,
		},
		{
			MethodName: "GetTeamForm",
			Handler:    _FixtureService_GetTeamForm_Handler,
		},
		{
			MethodName: "GetFutureFixtures",
			Handler:    _FixtureService_GetFutureFixtures_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fixture.proto",
}
