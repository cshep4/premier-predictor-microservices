// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fixture.proto

package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Matches struct {
	Matches              []*Match `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Matches) Reset()         { *m = Matches{} }
func (m *Matches) String() string { return proto.CompactTextString(m) }
func (*Matches) ProtoMessage()    {}
func (*Matches) Descriptor() ([]byte, []int) {
	return fileDescriptor_fixture_5f6ab4fdb05a6e7c, []int{0}
}
func (m *Matches) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Matches.Unmarshal(m, b)
}
func (m *Matches) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Matches.Marshal(b, m, deterministic)
}
func (dst *Matches) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Matches.Merge(dst, src)
}
func (m *Matches) XXX_Size() int {
	return xxx_messageInfo_Matches.Size(m)
}
func (m *Matches) XXX_DiscardUnknown() {
	xxx_messageInfo_Matches.DiscardUnknown(m)
}

var xxx_messageInfo_Matches proto.InternalMessageInfo

func (m *Matches) GetMatches() []*Match {
	if m != nil {
		return m.Matches
	}
	return nil
}

type Match struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	HTeam                string               `protobuf:"bytes,2,opt,name=hTeam,proto3" json:"hTeam,omitempty"`
	ATeam                string               `protobuf:"bytes,3,opt,name=aTeam,proto3" json:"aTeam,omitempty"`
	HGoals               int32                `protobuf:"varint,4,opt,name=hGoals,proto3" json:"hGoals,omitempty"`
	AGoals               int32                `protobuf:"varint,5,opt,name=aGoals,proto3" json:"aGoals,omitempty"`
	Played               int32                `protobuf:"varint,6,opt,name=played,proto3" json:"played,omitempty"`
	DateTime             *timestamp.Timestamp `protobuf:"bytes,7,opt,name=dateTime,proto3" json:"dateTime,omitempty"`
	Matchday             int32                `protobuf:"varint,8,opt,name=matchday,proto3" json:"matchday,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Match) Reset()         { *m = Match{} }
func (m *Match) String() string { return proto.CompactTextString(m) }
func (*Match) ProtoMessage()    {}
func (*Match) Descriptor() ([]byte, []int) {
	return fileDescriptor_fixture_5f6ab4fdb05a6e7c, []int{1}
}
func (m *Match) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Match.Unmarshal(m, b)
}
func (m *Match) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Match.Marshal(b, m, deterministic)
}
func (dst *Match) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Match.Merge(dst, src)
}
func (m *Match) XXX_Size() int {
	return xxx_messageInfo_Match.Size(m)
}
func (m *Match) XXX_DiscardUnknown() {
	xxx_messageInfo_Match.DiscardUnknown(m)
}

var xxx_messageInfo_Match proto.InternalMessageInfo

func (m *Match) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Match) GetHTeam() string {
	if m != nil {
		return m.HTeam
	}
	return ""
}

func (m *Match) GetATeam() string {
	if m != nil {
		return m.ATeam
	}
	return ""
}

func (m *Match) GetHGoals() int32 {
	if m != nil {
		return m.HGoals
	}
	return 0
}

func (m *Match) GetAGoals() int32 {
	if m != nil {
		return m.AGoals
	}
	return 0
}

func (m *Match) GetPlayed() int32 {
	if m != nil {
		return m.Played
	}
	return 0
}

func (m *Match) GetDateTime() *timestamp.Timestamp {
	if m != nil {
		return m.DateTime
	}
	return nil
}

func (m *Match) GetMatchday() int32 {
	if m != nil {
		return m.Matchday
	}
	return 0
}

func init() {
	proto.RegisterType((*Matches)(nil), "model.Matches")
	proto.RegisterType((*Match)(nil), "model.Match")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FixtureServiceClient is the client API for FixtureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FixtureServiceClient interface {
	GetMatches(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Matches, error)
}

type fixtureServiceClient struct {
	cc *grpc.ClientConn
}

func NewFixtureServiceClient(cc *grpc.ClientConn) FixtureServiceClient {
	return &fixtureServiceClient{cc}
}

func (c *fixtureServiceClient) GetMatches(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Matches, error) {
	out := new(Matches)
	err := c.cc.Invoke(ctx, "/model.FixtureService/GetMatches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FixtureServiceServer is the server API for FixtureService service.
type FixtureServiceServer interface {
	GetMatches(context.Context, *empty.Empty) (*Matches, error)
}

func RegisterFixtureServiceServer(s *grpc.Server, srv FixtureServiceServer) {
	s.RegisterService(&_FixtureService_serviceDesc, srv)
}

func _FixtureService_GetMatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FixtureServiceServer).GetMatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.FixtureService/GetMatches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FixtureServiceServer).GetMatches(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _FixtureService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model.FixtureService",
	HandlerType: (*FixtureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMatches",
			Handler:    _FixtureService_GetMatches_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fixture.proto",
}

func init() { proto.RegisterFile("fixture.proto", fileDescriptor_fixture_5f6ab4fdb05a6e7c) }

var fileDescriptor_fixture_5f6ab4fdb05a6e7c = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0x86, 0xcd, 0x66, 0xb7, 0x79, 0xa6, 0xbb, 0x08, 0x32, 0x42, 0xbd, 0xb0, 0x4c, 0xd0, 0x5e,
	0x65, 0x38, 0x65, 0x0f, 0x20, 0xe8, 0xbc, 0x11, 0xa4, 0xee, 0x05, 0xb2, 0xe6, 0x6c, 0x0d, 0x34,
	0x24, 0xa4, 0x99, 0xb8, 0xa7, 0xf5, 0x55, 0x64, 0xc9, 0x3a, 0x44, 0xef, 0xf2, 0x7f, 0xe7, 0xe7,
	0x1c, 0xfe, 0x3f, 0x70, 0xb1, 0x56, 0x5f, 0x7e, 0xeb, 0x90, 0x5b, 0x67, 0xbc, 0xa1, 0x89, 0x36,
	0x12, 0xeb, 0xf4, 0x6a, 0x63, 0xcc, 0xa6, 0xc6, 0x69, 0x80, 0xab, 0xed, 0x7a, 0x8a, 0xda, 0xfa,
	0x5d, 0xf4, 0xa4, 0xd7, 0x7f, 0x87, 0x5e, 0x69, 0x6c, 0xbc, 0xd0, 0x36, 0x1a, 0x26, 0xf7, 0xd0,
	0x7f, 0x13, 0xbe, 0xac, 0xb0, 0xa1, 0xb7, 0xd0, 0xd7, 0xf1, 0xc9, 0x48, 0xd6, 0xcd, 0x87, 0xb3,
	0x73, 0x1e, 0x2e, 0xf0, 0x60, 0x28, 0xda, 0xe1, 0xe4, 0x9b, 0x40, 0x12, 0x10, 0x1d, 0x41, 0x47,
	0x49, 0x46, 0x32, 0x92, 0x9f, 0x15, 0x1d, 0x25, 0xe9, 0x25, 0x24, 0xd5, 0x12, 0x85, 0x66, 0x9d,
	0x80, 0xa2, 0xd8, 0x53, 0x11, 0x68, 0x37, 0xd2, 0x20, 0xe8, 0x18, 0x7a, 0xd5, 0xc2, 0x88, 0xba,
	0x61, 0xa7, 0x19, 0xc9, 0x93, 0xe2, 0xa0, 0xf6, 0x5c, 0x44, 0x9e, 0x44, 0x2e, 0x8e, 0xdc, 0xd6,
	0x62, 0x87, 0x92, 0xf5, 0x22, 0x8f, 0x8a, 0xce, 0x61, 0x20, 0x85, 0xc7, 0xa5, 0xd2, 0xc8, 0xfa,
	0x19, 0xc9, 0x87, 0xb3, 0x94, 0xc7, 0xd0, 0xbc, 0x0d, 0xcd, 0x97, 0x6d, 0xe8, 0xe2, 0xe8, 0xa5,
	0x29, 0x0c, 0x42, 0x20, 0x29, 0x76, 0x6c, 0x10, 0x36, 0x1e, 0xf5, 0xec, 0x15, 0x46, 0x2f, 0xb1,
	0xea, 0x0f, 0x74, 0x9f, 0xaa, 0x44, 0x3a, 0x07, 0x58, 0xa0, 0x6f, 0x9b, 0x1a, 0xff, 0xbb, 0xf0,
	0xbc, 0xef, 0x3c, 0x1d, 0xfd, 0x2e, 0x0c, 0x9b, 0xc9, 0xc9, 0xd3, 0x1d, 0xdc, 0x94, 0x46, 0xf3,
	0xb2, 0xa9, 0xd0, 0x3e, 0x72, 0xeb, 0x50, 0x2b, 0x74, 0xd6, 0xa1, 0x54, 0xa5, 0x37, 0x8e, 0x1f,
	0x3e, 0xf4, 0x9d, 0xac, 0x7a, 0x61, 0xd5, 0xc3, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x29, 0x0e,
	0xd3, 0x5d, 0xe4, 0x01, 0x00, 0x00,
}
